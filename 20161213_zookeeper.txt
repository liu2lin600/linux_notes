2016-12-13
# edit by liu2lin600

zookeeper

♦ 概述：
	ZooKeeper 顾名思义 动物园管理员，他是拿来管大象(Hadoop) 、 蜜蜂(Hive) 、 小猪(Pig)  的管理员， Apache Hbase和 Apache Solr 以及LinkedIn sensei  等项目中都采用到了 Zookeeper，为分布式应用所设计的高可用、高性能且一致的开源协调服务，是Google的Chubby一个开源实现，是Hadoop和Hbase的重要组件，它提供了一项基本服务：分布式锁服务，还包括配置维护、组服务、分布式消息队列、分布式通知/协调等功能

♦ 原理
	1. 每个Server在内存中存储了一份数据
	2. Zookeeper启动时，将从实例中选举一个leader（Paxos协议，决定实例为奇数） 
	3. Leader负责处理数据更新等操作（Zab协议）
	4. 一个更新操作成功，当且仅当大多数Server在内存中成功修改数据

♦ 特点
	• 顺序一致性
		从同一个客户端发起的事务请求，最终将会严格按照其发起顺序被应用到zookeeper中

	• 原子性
		所有事物请求的处理结果在整个集群中所有机器上的应用情况是一致的，即，要么整个集群中所有机器都成功应用了某一事务，要么都没有应用，一定不会出现集群中部分机器应用了改事务，另外一部分没有应用的情况。

	• 单一视图
		无论客户端连接的是哪个zookeeper服务器，其看到的服务端数据模型都是一致的。

	• 可靠性
		一旦服务端成功的应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会一直保留下来，除非有另一个事务又对其进行了改变。

	• 实时性
		zookeeper并不是一种强一致性，只能保证顺序一致性和最终一致性，只能称为达到了伪实时性

♦ 设计目标：
	• 简单的数据模型
		使分布式程序可通过一个共享的、树型结构的名字空间进行相互协调，名字空间为zk服务器内存中一个数据模型，由一系列被称为ZNode数据节点组成，类似一个文件系统，存储在内存中，实现提高服务器吞吐，减少延迟

	• 简单群集构建
		一般3-5台机器就可以组成一个高可用的zk群集，每台之间都互相保持通信，只要集群中超过一半的机器存活就能正常对外服务。zk客户端会选择zk集群中任一台来连接创建连接，通过这个连接，客户端能通过心跳检测与zk服务器保持有效会话

	• 顺序访问
		每次客户端请求，zk都会分配一个全局唯一的递增ID，应用可使用此特性实现更高层次的同步原语

	• 高性能
		所有数据存储在内存中，并直接服务于客户端所有非事务请求，尤其适用于以读操作为主的应用场景

♦ 角色
	区别于一般集群模式中的主从模式

	1. Leader：领导者负责进行投票的发起和决议，更新系统状态，处理写请求
	2. Follower：用于接收客户端的读写请求并向客户端返回结果，在选主过程中参与投票
	3. Observer：观察者可以接收客户端的读写请求，并将写请求转发给Leader，但Observer节点不参与投票过程，只同步leader状态，Observer的目的是为了，扩展系统，提高读取速度

♦ 数据模型
	ZooKeeper拥有一个层次的命名空间，这个和标准的文件系统非常相似，采用树形层次结构，树中的每个节点被称为—Znode，Znode也可以拥有子节点，通过绝对路径来引用Znode，如/client_conf/hive

	/ --->/client_conf --->/client_conf/hive,/client_conf/redis...
	  --->/server_conf --->...
	  --->/status 	   --->...

	每个Znode兼容文件和目录两种特点，既像文件一样维护着数据、元信息、ACL、时间戳等数据结构，又像目录一样可以作为路径标识的一部分。每个Znode由3部分组成 :

		1、stat：此为状态信息, 描述该Znode的版本, 权限等信息
		2、data：与该Znode关联的数据
		3、children：该Znode下的子节点

	ZooKeeper虽然可以关联一些数据，但并没有被设计为常规的数据库或者大数据存储，相反的是，它用来管理调度数据，比如分布式应用中的配置文件信息、状态信息、汇集位置等等。这些数据的共同特性就是它们都是很小的数据，通常以KB为大小单位。ZooKeeper的服务器和客户端都被设计为严格检查并限制每个Znode的数据大小至多1M，但常规使用中应该远小于此值

	数据节点分类：
		1. 持久(PERSISTENT)
		2. 持久带序号(PERSISTENT_SEQUENTIAL)
		3. 临时(EPHEMERAL)，不能有子节点
		4. 临时带序号(EPHEMERAL_SEQUENTIAL)

♦ 事件监听


♦ 读写数据
	• 写数据：一个客户端进行写数据请求时，会指定zk集群中节点，如果是follower接收到写请求，就会把请求转发给Leader，Leader通过内部的Zab协议进行原子广播，直到所有zk节点都成功写了数据后（内存同步以及磁盘更新），这次写请求算是完成，然后zk service就会给client发回响应
	• 读数据：因为集群中所有的zk节点都呈现一个同样的命名空间视图（就是结构数据），上面的写请求已经保证了写一次数据必须保证集群所有的zk节点都是同步命名空间的，所以读的时候可以在任意一台zk节点上


♦ 工作模式
	ZooKeeper的工作模式有三种:单机模式、集群模式、伪集群模式

	1. 单机模式：Zookeeper只运行在一台服务器上，适合测试环境
	2. 伪集群模式：就是在一台物理机上运行多个Zookeeper 实例
	3. 集群模式：Zookeeper运行于一个至少有三个节点以上集群中，适合生产环境

♦ 应用
	1. 命名服务
		zk很容易提供了给一个资源生成一个唯一的ID，在没有中心管理结点的情况下生成这个ID并不是一件很容易的事儿

	2. 配置管理
		用于多个结点共享配置，并且在配置发生更新时，利用zk可以让这些使用了这些配置的结点获得通知，进行重新加载等操作

	3. 集群管理
		• 主从选举：

		• 资源定位：用于分布式系统中一些服务节点位置或者状态发生变化时，通知一些相关的需要知道的服务节点发生了这些变化，以便于其能够做出一定的响应

	4. 共享锁
		实现起来和集群选主基本一致，都是创建一个自动编号的临时结点，然后watch父结点，判断自己是否是最小编号节点

♦ 容灾
	zk集群天生已经解决了单点问题，集群中只要超过半数的机器存活即可对外服务，容灾方案主要有：

	1. 双机房：目前版本的 Zk 中，还没有办法能够在双机房条件下实现比较好的容灾效果——因为无论哪个机房发生异常情况，都有可能使得Zk集群中可用的机器无法超过半数

	2. 3机房：理想状态

♦ 水平扩展
	ZooKeeper 在水平扩容扩容方面做得并不十分完美，需要进行整个集群的重启

	1. 集群整体重启
		将整个集群停止，然后更新 ZooKeeper 的配置，然后再次启动。如果在你的系统中，ZooKeeper 并不是个非常核心的组件，并且能够允许短暂的服务停止（通常是几秒钟的时间间隔），那么不妨选择这种方式。在整体重启的过程中，所有该集群的客户端都无法连接上集群。等到集群再次启动，这些客户端就能够自动连接上——注意，整体启动前建立起的客户端会话，并不会因为此次整体重启而失效。也就是说，在整体重启期间花费的时间将不计入会话超时时间的计算中

	2. 逐台进行服务器的重启
		这种方式更适合绝大多数的实际场景。在这种方式中，每次仅仅重启集群中的一台机器，然后逐台对整个集群中的机器进行重启操作。这种方式可以在重启期间依然保证集群对外的正常服务

♦ 数据文件
	1. 数据目录（dataDir）
	    	A、myid – 这个文件只包含一个数字，和serverid对应
	    	B、snapshot - 按zxid先后顺序的生成的数据快照

		集群中的每台ZK server都会有一个用于惟一标识自己的id，有两个地方会使用到这个id：myid文件和zoo.cfg文件中。myid文件存储在dataDir目录中，指定了当前server的server id。在zoo.cfg文件中，根据server id，配置了每个server的ip和相应端口。Zookeeper启动的时候，读取myid文件中的server id，然后去zoo.cfg 中查找对应的配置

		zk在进行数据快照过程中，会生成snapshot文件，存储在dataDir目录中。文件后缀是zxid，也就是事务id。（这个zxid代表了zk触发快照那个瞬间，提交的最后一个事务id）。注意，一个快照文件中的数据内容和提交第zxid个事务时内存中数据近似相同。仅管如此，由于更新操作的幂等性，ZK还是能够从快照文件中恢复数据。数据恢复过程中，将事务日志和快照文件中的数据对应起来，就能够恢复最后一次更新后的数据了

	2. 事务日志目录（dataLogDir）
		dataLogDir目录是ZK的事务日志目录，包含了所有ZK的事务日志。正常运行过程中，针对所有更新操作，在返回客户端“更新成功”的响应前，ZK会确保已经将本次更新操作的事务日志写到磁盘上，只有这样，整个更新操作才会生效。每触发一次数据快照，就会生成一个新的事务日志。事务日志的文件名是log.，zxid是写入这个文件的第一个事务id

	3. 文件管理
		不同的zk server生成的snapshot文件和事务日志文件的格式都是一致的。因此，如果某一天生产环境中出现一些古怪的问题，你就可以把这些文件下载到开发环境的zk中加载起来，便于调试发现问题，而不会影响生产运行。另外，使用这些较旧的snapshot和事务日志，我们还能够方便的让ZK回滚到一个历史状态。
		另外，ZK提供的工具类LogFormatter能够帮助可视化ZK的事务日志，帮助我们排查问题
		
		zk在运行过程中，不断地生成snapshot文件和事务日志，3.4版本后可以自动清理

♦ 安装配置
	◇ 下载解压
		wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz
		tar xf zookeeper-3.4.9.tar.gz
		cd zookeeper-3.4.9

	◇ 配置文件（3台机器为例）
		cp conf/zoo-sample.cfg conf/zoo.cfg
		echo 1 > /zookeeper/data/myid 		# 对应的服务器id

		tickTime=2000 					# 心跳时间2s
		initLimit=10 					# follower连接leader初始化最长时间
		syncLimit=5 					# Leader与Follower之间发送消息，请求和应答时间长度
		
		dataDir=/zookeeper/data 		# 数据目录
		dataLogDir=/zookeeper/log 		# 事务日志目录
		logDir=/zookeeper/ 				# 启动有运行中产生的日志信息

		
		clientPort=2181 				# 客户端连接端口，默认2181
		server.1=host1:2888:3888 		# 第1台服务
		server.2=host2:2888:3888 		# 2888为flower与leader通信端口
		server.3=host3:2888:3888 		# 3888为选举端口

		autopurge.snapRetainCount=3		# 保留3个数据快照
		autopurge.purgeInterval=1 		# 自动清理间隔为1h
		forceSync=yes 					# 更新数据立刻写入盘，如果经常变更则不建议开启

		# 可以在同一台启动多实例，clientPort需不同

	◇ zk可执行脚本
		zkCleanup 	：清理zk历史数据，包括事务日志和快照数据
		zkCli 		：客户端shell
		zkEnv 		：设置zk环境变量
		zkServer 	：服务器启动、停止、重启

	◇ 启动及状态
		./bin/zkServer.sh start|status

	◇ 进行命令行shell
		./bin/zkCli.sh [-server [HOST:PORT]]

	◇ 常用命令

		ls /
		get /zookeeper
		create [-s] [-e] /test
		set /test 'hello'
		delete /test
		rmr /test

	◇ 4字命令
		ZooKeeper 支持某些特定的四字命令字母与其的交互。它们大多是查询命令，用来获取 ZooKeeper 服务的当前状态及相关信息。用户在客户端可以通过 telnet 或 nc 向 ZooKeeper 提交相应的命令

		conf 	输出相关服务配置的详细信息
		cons	列出所有连接到服务器的客户端的完全的连接/会话的详细信息。包括包数量、会话 id 、操作延迟、最后的操作执行等信息
		dump	列出未经处理的会话和临时节点
		envi	输出关于服务环境的详细信息（区别于 conf 命令）
		reqs	列出未经处理的请求
		ruok	测试服务是否处于正确状态。如果确实如此，那么服务返回“ imok ”，否则不做任何相应
		status	输出关于性能和连接的客户端的列表
		wchs	列出服务器 watch 的详细信息
		wchc	通过 session 列出服务器 watch 的详细信息，它的输出是一个与 watch 相关的会话的列表
		wchp	通过路径列出服务器 watch 的详细信息。它输出一个与 session 相关的路径

		用法：
			echo conf | nc 127.0.0.1 2181




♦ 更多
	https://my.oschina.net/xianggao/blog/531204
	https://blog.linuxeye.com/393.html
	http://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/


