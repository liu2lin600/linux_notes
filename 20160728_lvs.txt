2016-07-28
# edit by liu2lin600

Linux Cluster集群


    Cluster：计算机集合、为解决某个特定问题组合起来

    系统扩展方式：
        scale up: 向上扩展
        scale out: 向外扩展

    Session持久机制：
        1、session绑定：始终将来自同一个源IP的请求定向至同一个RS，没有容错能力，有损均衡效果
        2、session复制：在RS之间同步session，每个RS拥有集群中的所有的session，对规模集群不适用
        3、session服务器：利用单独部署的服务器来统一管理集群中的session

    集群类型：
        LB：Load Balancing 负载均衡
        HA：High Availability 高可用
        HP：High Performance 高性能
        DS：distributed system 

    LB集群：
        硬件：
            F5: BIG-IP
            Citrix: Netscaler
            A10: A10
            Array
            Redware
        软件：
            lvs
            nginx
            haproxy
            ats
            perlbal
            pound
        基于工作的协议层划分：
            传输层：
                lvs, nginx, haproxy
            应用层：
                http: nginx, haproxy, httpd
                fastcgi: nginx, httpd
                mysql: mysql-proxy
                

        lvs：
            组成：ipvsadm/ipvs
                ipvsadm：用户的空间的命令行工具，规则管理器，用于管理集群服务及RealServer
                ipvs：工作于内核空间的netfilter的INPUT钩子之上的框架，可接收来ipvsadm的管理命令
                
                支持基于TCP、UDP、SCTP、AH、ESP、AH_ESP等 协议进行调度

            lvs集群的常用术语：
                vs: virutal server, Director, Dispatcher, Balancer
                rs: real server, backend server, upstream server
                
                CIP: Client IP
                VIP: Virtual Server IP
                DIP: Director IP
                RIP: Real Server IP
                
                CIP <--> VIP <--> DIP <--> RIP

            lvs集群类型：
                lvs-nat
                lvs-dr
                lvs-tun
                lvs-fullnat
                
                1.lvs-nat：
                    多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为某挑出的RS的RIP和PORT实现转发
                    
                    (1) RIP和DIP必须在同一个IP网络，且应该使用私网地址；RS的网关要指向DIP
                    (2) 请求报文和响应报文都必须经由Director转发；Director易于成为系统瓶颈
                    (3) 支持端口映射；VIP上的端口和RIP上的端口不必非得是同一个
                    (4) vs必须是Linux系统，rs可以是任意系统
                    
                2.lvs-dr：
                    Direct Routing：直接路由
                    
                    通过为请求报文重新封装一个MAC首部进行转，源MAC是DIP所在的接口的MAC，目标MAC是某挑选出的RS的RIP所在接口的MAC地址，源IP/PORT，以及目标IP/PORT均保持原状
                    
                    (1) 确保前端路由器将目标IP为VIP的请求报文发往Director，3种方式如下
                        (a) 在前端路由器绑定，可实现但不实用
                        (b) 在RS使用arptables
                        (c) 在RS上修改内核参数限制通告及应答级别，RS上的VIP配置在lo接口别名上
                            echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore
                            echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore
                            echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce
                            echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce
                    (2) RS的RIP可以私网地址，也可是公网地址，RIP与DIP在同一个IP网络
                    (3) RS跟Director要在同一个物理网络，以实现基于MAC地址的转发
                    (4) 请求报文要经由Director，但响应不能经由Director
                    (5) 不支持端口映射
                    
                3.lvs-tun：tunnel，隧道
                    转发方式：不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而是在IP报文之外再封装一个IP首部（源IP是DIP，目标IP是RIP），将报文发往挑选出的目标RS
                    
                    (1) DIP, VIP, RIP应该都是公网地址
                    (2) RS网关必须不能指向DIP
                    (3) 请求报文要经由Director，但响应不能经由Director，而是直接发往CIP
                    (4) 不支持端口映射
                    (5) RS必须支持隧道功能
                    
                4. lvs-fullnat：
                    通过同时修改请求报文的源IP地址和目标IP地址进行转发
                        cip --> dip 
                        vip --> rip 
                        
                    (1) VIP是公网地址，RIP和DIP是私网地址，且通常不在同一IP网络
                    (2) RS收到的请求报文源地址为DIP，因响应给DIP即可
                    (3) 请求和响应报文都经由Director
                    (4) 支持端口映射
                    
                    注意：默认不支持
                    
            ipvs scheduler：lvs调度方法

                根据其调度时是否考虑各RS当前的负载状态，可分为静态方法和动态方法

                静态方法：仅根据算法本身进行调度，注重起点公平
                    RR：roundrobin，轮询
                    WRR：Weighted RR，加权轮询
                    SH：Source Hashing，源地址哈希，将来自于同一个IP地址的请求始终发往第一次挑中的RS，从而实现了会话绑定
                    DH：Destination Hashing，目标地址哈希，将发往同一个目标地址的请求，始终转发至第一次挑中的RS，用于正向代理缓存
                
                动态方法：主要根据每RS当前的负载状态进行调度，注重结果公平
                    LC：least connections，最少连接
                        Overhead = activeconns*256+inactiveconns
                    WLC：Weighted LC, 加权最少连接
                        Overhead = （activeconns*256+inactiveconns）/weight 
                    SED：Shortest Expection Delay，最短期望延迟
                        Overhead=(activeconns+1)*256/weight
                    NQ：Never Queue
                    LBLC：Locality-Based Least connections，基于本地的最少连接；动态的DH算法； 
                    LBLCR：LBLC with Replication，


            ipvsadm：lvs管理工具

                0. 参数说明：
                    service-address:集群服务，即director
                    server-address:即real-server

                1. 添加或修改一个集群服务：
                    ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]]
                        -A：添加一个集群服务
                        service-address：
                            -t：tcp VIP:PORT
                            -u：udp VIP:UDP_PORT
                            -f：firewall mark 通常应用于将两个或以上的服务绑定为一个服务进行处理时使用
                            -s：调度算法，默认为wlc
                            -p：timeout persistent connection 持久连接
                        -E：修改定义过的集群服务

                        如：ipvsadm -A -t 172.16.60.1:80 -s rr

                2. 向一个已经存在集群服务添加一个RS：
                    ipvsadm -a|e -t|u|f service-address -r server-address [options]
                        -r RS-ADDR
                        -w weight
                        -g: gatewaying (direct routing) (default)
                        -i: ipip encapsulation (tunneling)
                        -m: masquerading (NAT) 地址伪装

                        如：ipvsadm -a -t 172.16.60.1:80 -r 192.168.1.1:8080 -m -w 1

                3. 查看已经定义的集群服务及RS：
                    ipvsadm -L [options]
                        -n: 数字格式显示，不反解
                        -c: 查看各连接
                        --stats: 统计数据
                        --rate:　速率
                        --exact: 精确值

                    # ipvsadm -nL --stats

                4. 从集群服务中删除RS：
                    ipvsadm -d -t|u|f service-address -r server-address

                5. 删除集群服务：
                    ipvsadm -D -t|u|f service-address

                6. 清空所有的集群服务：
                    ipvsadm -C 

                7. 保存集群服务定义：
                    ipvsadm -S > /path/to/some_rule_file
                    ipvsadm-save > /path/to/some_rule_file

                8. 让规则文件中的规则生效：
                    ipvsadm -R < /path/from/some_rule_file
                    ipvsadm-restore < /path/from/some_rule_file

                9. 清空计数器：
                    ipvsadm -Z [-t|u|f service-address]


            FWM：firewall mark 防火墙标记
        
                在netfilter上，为某些匹配规则匹配到报文添加标记：mangle表上
                    打标记方法：
                        iptables -t mangle -A PREROUTING -d $vip -p $protocol --dport $port -j MARK --set-mark 6
                        
                    基于标记定义集群服务：
                        ipvsadm -A -f 6 -s rr
                        
            lvs persistence：持久连接
                基于持久连接模板，实现无论使用任何算法，在一段时间将来自同一个地址的请求始终发往同一个RS；
                
                Port Affinity：
                    每端口持久：仅在一段时间内，将对来自于同一个IP地址的访问相同服务的请求发往后端的同一个RS
                        $vip:PORT
                    每客户端持久：仅在一佒时间内，将对所有端口的请求始终发往后端的一同一个RS
                        $vip:0              
                    每防火墙标记持久：在一段时间内，将对绑定为同一个FWM的请求发往同一个后端RS
                        FWM 


lvs-dr中rs网卡设置脚本示例： 
    #!/bin/bash
    #
    vip=172.16.60.100
    mask=255.255.255.255

    case $1 in
    start)
        echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore
        echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore
        echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce
        echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce

        ifconfig lo:0 $vip netmask $mask broadcast $vip up
        route add -host $vip dev lo:0

        ;;
    stop)
        ifconfig lo:0 down

        echo 0 > /proc/sys/net/ipv4/conf/all/arp_ignore
        echo 0 > /proc/sys/net/ipv4/conf/lo/arp_ignore
        echo 0 > /proc/sys/net/ipv4/conf/all/arp_announce
        echo 0 > /proc/sys/net/ipv4/conf/lo/arp_announce
        ;;
    *)
        echo "Usage: $(basename $0) start|stop"
        ;;
    esac







[备1]：
arp_ignore：响应级别，定义对目标地址为本地IP的ARP询问不同的应答模式0
    0 - (默认值): 回应任何网络接口上对任何本地IP地址的arp查询请求
    1 - 只回答目标IP地址是来访网络接口本地地址的ARP查询请求
    2 - 只回答目标IP地址是来访网络接口本地地址的ARP查询请求,且来访IP必须在该网络接口的子网段内
    3 - 不回应该网络界面的arp请求，而只对设置的唯一和连接地址做出回应
    4-7 - 保留未使用
    8 - 不回应所有（本地地址）的arp查询 

确定了向外发送ARP请求的发出地址 也即使VIP 地址

arp_announce：通告级别
    对网络接口上，本地IP地址的发出的，ARP回应，作出相应级别的限制，确定不同程度的限制，宣布对来自本地源IP地址发出Arp请求的接口

    0 - (默认) 在任意网络接口（eth0,eth1，lo）上的任何本地地址

    1 -尽量避免不在该网络接口子网段的本地地址做出arp回应. 当发起ARP请求的源IP地址是被设置应该经由路由达到此网络接口的时候很有用.此时会检查来访IP是否为所有接口上的子网段内ip之一.如果改来访IP不属于各个网络接口上的子网段内,那么将采用级别2的方式来进行处理.

    2 - 对查询目标使用最适当的本地地址.在此模式下将忽略这个IP数据包的源地址并尝试选择与能与该地址通信的本地地址.首要是选择所有的网络接口的子网中外出访问子网中包含该目标IP地址的本地地址. 如果没有合适的地址被发现,将选择当前的发送网络接口或其他的有可能接受到该ARP回应的网络接口来进行发送. 

    限制了使用本地的vip地址作为优先的网络接口