2016-06-28
# edit by liu2lin600

OpenSSH简介：

远程连接：
    telnet服务：明文传输，监听tcp协议的23号端口
        客户端：telnet
        服务器：telnet-server
        查看：ss -tan | grep :23

        注：默认禁止管理员直接登陆

    ssh：Secure SHell，监听tcp协议的22号端口
        注：建议使用普通用户登录。而后su到管理员

        C/S：
            Server：OpenSSH(sshd)，监听22/tcp
            Client：OpenSSH(ssh, scp)
            windows客户端：xmanager(xshell)、SecureCRT、putty、sshshellcilent

        流程：
            一、主机认证
                第一次登录会认证远程主机的公钥指纹信息，保存到本地的可认证主机列表

            二、用户认证
                1. 基于口令认证
                2. 基于密钥认证
        
        sshv1,sshv2，由于sshv1是居于CRC-32做MAC，因此，不安全，建议勿用
        sshv2 基于双发主机协商选择最安全的MAC实现机制
            加密机制和MAC机制是双方协商选定
            基于DH实现密钥交换，基于RSA或DAS实现身份认证
            客户端通过检查服务端的主机密钥来判断是否与其进一步通信

OpenSSH：
    配置文件：
        sshd：/etc/ssh/sshd_config
        ssh：/etc/ssh/ssh_config

OpenSSH客户端组件：
    ssh：远程连接命令
        ssh [-p PORT] Username@HOST [command]
        ssh [-p PORT] -l Username HOST [command]

        注：如果不跟用户名时，默认使用本地用户名作远程登录名

        ssh认证机制：
            一、基于口令认证
            二、基于密钥认证
                1. 客户端生成密钥对默认保存家目录下的.ssh下的id_rsa，公钥在id_rsa.pub
                ssh-keygen [-t rsa|dsa|ecdsa] [-q] [-b bits] [-f OUT_FILE] [-P PASS] 
                    ssh-keygen -t rsa
                
                2. 复制密钥至远程主机 (保存于~/.ssh/authorized_keys)
                    ssh-copy-id [-i PUB_KEY] USER@HOST:/xxx
    
    scp：类cp命令，基于ssh协议跨主机复制
        scp [OPTION] SRC1[ SRC2...] DEST
       
        分两种情况：
            1. 源文件在本机，目标为远程，即上传
                scp /path/to/somefile ... User@HOST:/path/to/somewhere
            
            2. 源文件在远程，目标在本机，即下载
                scp User@HOST:/path/to/somefile /path/to/somewhere

            常用选项：
                -r：当源文件为目录，以实现递归复制
                -p：保留源文件的复制及修改时间戳，以及权限
                -q：静默模式
                -P PORT：指定服务器端口

    sftp：基于ssh安全文件传输机制
        C/S架构：
            C：sftp
            S：由sshd服务进程管理，centos上默认开启，sshd配置文件中
                Subsystem  sftp    /usr/libexec/openssh/sftp-server

        用法：sftp [User@]HOST


openSSH服务器端：sshd
    
    主配置文件：/etc/ssh/sshd_config
    服务脚本：/etc/rc.d/init.d/sshd
    脚本配置文件：/etc/sysconfig/sshd

    查看帮助： 
        man sshd_config     man sshd
        man ssh_config      man ssh

    /etc/ssh/sshd_config配置：   
        Port 22             # 监听端口
        AddressFamily any   # ipv4 ipv6
        ListernAddress      # 当前主机的监听地址
        Protocol            # 协议版本
        
        HostKeys for protocol version 2
        HostKey /etc/ssh/ssh_host_rsa_key
        HostKey /etc/ssh/ssh_host_dsa_key   # 验证主机的公钥
        KeyRegenerationInterval 1h          # 密钥的使用时间
        ServerKeyBits 1024                  # 密钥长度
        
        LogLevel INFO       # 日志级别
        LoginGraceTime 2m   # 登陆宽限期
        PermitRootLogin yes # root是否可以登录
        StrictModes yes     # 严格模式，家目录 属主 属组
        MaxAuthTries 6      # 最多可以承受的次数
        MaxSessions 10      # 最大并发连接数
        
        PasswordAuthentication yes  # 是否使用用户名和密码的方式
        Kerberos                    # 统一认证管理
        X11Forwarding yes           # 是否转发图形窗口
        PrintMotd                   # 登录是否显示/etc/motd内容
        PrintLastLog                # 显示上次登录日志
        UseDNS no                   # dns反解
        Subsystem                   # sftp
        
        AllowUsers user1...     # 用户白名单
        Allowgroups  grp1...    # 组白名单
        DenyUser  user1...      # 用户黑名单   
        DenyGroup grp1...       # 
  

使用ssh的最佳实践：
    1. 不要使用默认的22号端口
    2. 不要使用protocol v1
    3. 限制可登录的用户
        白名单：
            AllowUsers user1 user2 ...
            AllowGroups grp1 grp2...
        黑名单：
            DenyUsers 
            DenyGroups
    4. 设定空闲会话超时时长
        ClientAliveInterval 300 
        ClientAliveCountMax 0
    5. 利用防火墙设置ssh访问策略
    6. 仅监听在特定的IP地址，而非本机所有的IP地址
    7. 使用强密码策略
        tr -dc A-Za-z0-9_ < /dev/urandom | head -c 30 | xargs
    8. 使用基于密钥的认证
    9. 禁止使用空密码
    10. 禁止root用户直接登录
    11. 限制ssh的访问频度和并发在线数
    12. 做好日志，经常分析

命令总结：ssh, ssh-keygen, ssh-copy-id, scp, sftp, sshd
文件总结：
    ~/.ssh/known_hosts      # 受信任的远程主机
    ~/.ssh/id_rsa           # 本机私钥
    ~/.ssh/id_rsa.pub       # 本机公钥
    ~/.ssh/authorized_keys  # 存放远程主机公钥，可免密登录本机
    /etc/ssh/ssh_config     # 全局ssh客户端配置
    /etc/ssh/sshd_config    # sshd服务配置  可参考 http://www.jinbuguo.com/openssh/sshd_config.html
    /var/log/secure         # 登录日志

ssh中的GSSAPI相关选项：
    GSSAPI(Generic Security Services Application Program Interface)，GSSAPI本身是一套API，由IETF标准化。其最主要也是著名的实现是基于Kerberos的。一般说到GSSAPI都暗指Kerberos实现。 GSSAPI是一套通用网络安全系统接口。该接口是对各种不同的客户端服务器安全机制的封装，以消除安全接口的不同，降低编程难度

    SSH默认开启了GSSAPIAuthentication认证，一般SSH依次进行的认证方法的是publickey,gssapi-keyex,gssapi-with-mic,password，这个你可以ssh -v开启debug模式在连接日志看到。

    一般用户只使用password认证方式，但前面3个认证过程系统还是会尝试，这就浪费时间了，也就造成SSH登录慢。关于gssapi相关的认证，消耗的时间比较多，具体可以查看ssh连接日志，GSSAPI1主要是基于Kerberos的，因此要解决这个问题也就变得要系统配置有Kerberos，如果没则最好关掉

    gss引起的登录慢问题排查：
    
        1. 查看详情
            ssh -v root@192.168.1.1  

        2. 禁用gss登录
            ssh -o GSSAPIAuthentication=no root@192.168.1.1  
            或：echo "GSSAPIAuthentication no" >> ~/.ssh/config     # ssh客户端配置，不改全局配置

ssh端口转发：
    见有道笔记


ssh协议的另一个实现：dropbear, 轻量化的实现方案，多用于嵌入式环境中,供简单ssh远程连接服务
    工具：
        dropbear: 服务端程序
            -p [IP:]PORT：
            -F：前台
            -E：将日志发往错误输出

        dbclinet: ssh协议客户端程序
            dbclinet [opt] [User@]Host[/PORT]... [COMMAND]

        dropbeatkey:主机密钥生成工具
            dropbearkey -t type -f file [-s bits]


    步骤：
        1、编译并移植dropbear, dropbearkey, dbclient, scp
            1. 下载源码
            2. tar xf dropbear-2013.58.tar.bz2
            3. cd dropbear-2013.58
            4. ./configure
            5. make PROGRAMS='dropbear scp dropbearkey dbclient'    # 指定生成的工具
            6. make PROGRAMS='dropbear scp dropbearkey dbclient' install
        
        2、启动
            mkdir /etc/dropbear
            dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key -s 2048
                或：dropbearkey -t dss -f /etc/dropbear/dropbear_dsa_host_key
            dropbear -p 2222 -F -E;ss –tnl      #-F前台运行，查看远程登录时记录
            ssh -p 2222 root@127.0.0.1
            dropbear -p 2222      #默认后台运行
            dbclient -p 2222 root@127.0.0.1

        3、提供服务脚本，开机自运行

        dropbear脚本示例：vim /etc/init.d/dropbear
            #!/bin/bash
            #
            #description: dropbear ssh daemon
            #chkconfig: 2345 66 33
            #
            dbprog='/usr/local/sbin/dropbear'
            dbkeygen='/usr/local/bin/dropbearkey'
            dsskey='/etc/dropbear/dropbear_dss_host_key'
            rsakey='/etc/dropbear/dropbear_rsa_host_key'
            rsakeysize=2048
            dbport=22022

            gendsskey() {
                if [ ! -f $dsskey ]; then
                    echo "Generating dss key file."
                    [ -d /etc/dropbear ] || mkdir /etc/dropbear
                    $dbkeygen -t dss -f $dsskey
                fi
            }

            genrsakey() {
                if [ ! -f $rsakey ]; then
                    echo "Generating rsa key file."
                    [ -d /etc/dropbear ] || mkdir /etc/dropbear
                    $dbkeygen -t rsa -s $rsakeysize -f $rsakey
                fi
            }

            start() {
                gendsskey
                genrsakey

                if ! pidof dropbear &> /dev/null; then
                    echo "Starting dropbear"
                    $dbprog -p $dbport
                    retval=$?
                else
                    echo "$dbprog is already running..."
                    return 1
                fi
                
                if [ $retval -eq 0 ]; then
                    echo "OK"
                    return 0
                else
                    echo "Failure"
                    return 1
                fi
            }

            stop() {
                echo "stopping dropbear"
                
                if pidof dropbear &> /dev/null; then
                    echo "stopping dropbear"
                    killall dropbear
                    retval=$?
                else
                    echo "$dbprog is not running..."
                    return 1
                fi  
            }

            restart() {
                stop
                sleep 1
                start
            }

            usage() {
                echo "Usage: `basename $0` {start|stop|restart}"
            }

            case $1 in 
            start)
                start
                ;;
            stop)
                stop
                ;;
            restart)
                restart
                ;;
            *)
                usage
                ;;
            esac


