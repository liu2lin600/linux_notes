2016-12-12
# edit by liu2lin600

kafka

♦ 定义
	Apache kafka 是一个分布式的基于push-subscribe的消息系统，它实现了生产者(生产信息)和消费者(处理分析)之间的无缝连接，它具备快速、可扩展、可持久化的特点

	它现在是Apache旗下的一个开源系统，作为hadoop生态系统的一部分。它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/spark流式处理引擎

♦ 特点
	1. 高吞吐量、低延迟：kafka每秒可以生产约25万消息(50M)，每秒处理55万消息(110MB)，它的延迟最低只有几毫秒
	2. 可扩展性：kafka集群支持热扩展
	3. 持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失
	4. 容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）
	5. 高并发：支持数千个客户端同时读写

♦ 术语
	• Broker：Kafka集群包含一个或多个服务器，这种服务器被称为broker
	• Topic：每条发布到Kafka集群的消息都有一个类别，这个类别被称为topic。（物理上不同topic的消息分开存储，逻辑上一个topic的消息虽然保存于一个或多个broker上但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处）
	• Partition：parition是物理上的概念，每个topic包含一个或多个partition，创建topic时可指定parition数量。每个partition对应于一个文件夹，该文件夹下存储该partition的数据和索引文件
	• Producer：负责发布消息到Kafka broker
	• Consumer：消费消息。每个consumer属于一个特定的consumer group（可为每个consumer指定group name，若不指定group name则属于默认的group）。使用consumer high level API时，同一topic的一条消息只能被同一个consumer group内的一个consumer消费，但多个consumer group可同时消费这一消息

♦ 组件
	Kafka中发布订阅的对象是topic，可以为每类数据创建一个topic，把向topic发布消息的客户端称作producer，从topic订阅消息的客户端称作consumer。Producers和consumers可以同时从多个topic读写数据。一个kafka集群由一个或多个broker服务器组成，它负责持久化和备份具体的kafka消息

		• topic：消息存放的目录即主题
		• Producer：生产消息到topic的一方
		• Consumer：订阅topic消费消息的一方
		• Broker：Kafka的服务实例就是一个broker

	消息发送时都被发送到一个topic，其本质就是一个目录，而topic由是由一些Partition Logs(分区日志)组成,其组织结构如下图所示：

			+----------+ +-------------------------------+
			|partition1| |0|1|2|3|4|5|...                | <----+
			+----------+ +-------------------------------+ 		|
			+----------+ +-------------------------------+      |
	topic1	|partition2| |0|1|2|3|4|5|6|7...             | <----+ 写
			+----------+ +-------------------------------+      |
			+----------+ +-------------------------------+      |
			|partition3| |0|1|2|3|4|5|6|7|8...           | <----+
			+----------+ +-------------------------------+

			    old -----------------------------------> new

		• 每个Partition中的消息都是有序的，生产的消息被不断追加到Partition上，并赋予了一个唯一的offset值
		• Kafka集群会保存所有的消息，不管消息有没有被消费，可以设定消息的过期时间，只有过期的数据才会被自动清除
		• Kafka需要维持的元数据只有一个(消费消息在Partition中的offset值)，Consumer每消费一个消息，offset就会加1，其实消息的状态完全是由Consumer控制的，Consumer可以跟踪和重设这个offset值，这样的话Consumer就可以读取任意位置的消息
		• 把消息日志以Partition的形式存放有多重考虑，
			1. 方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了
			2. 就是可以提高并发，因为可以以Partition为单位读写了

♦ 分配

	1) Producer端使用zookeeper用来"发现"broker列表,以及和Topic下每个partition leader建立socket连接并发送消息.
    2) Broker端使用zookeeper用来注册broker信息,已经监测partitionleader存活性.
    3) Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息

♦ 消息传递保障
	• 最多一次：消息可能丢失，但永远不会重发
	• 至少一次：消息绝不会丢失，但有可能重新发送
	• 正好一次：这是人们真正想要的，每个消息传递一次且仅一次

♦ 与Zookeeper关系

	Kafka依赖Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance

 - Producer端使用zookeeper用来"发现"broker列表,以及和Topic下每个partition leader建立socket连接并发送消息.
 - Broker端使用zookeeper用来注册broker信息,已经监测partition leader存活性.
 - Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息


♦ 常见操作

1. 官网下载并解压

    ```
    tar xf kafka_2.11-0.10.1.0.tgz
    cd kafka_2.11-0.10.1.0
    ```

1. 开启服务

    ```
    bin/zookeeper-server-start.sh config/zookeeper.properties          # 启动zookeeper
    bin/kafka-server-start.sh config/server.properties                 # 启动kafka服务
    ```

1. topic相关操作，创建时需指定zk服务(通常为zk集群，各服务用逗号隔开)，可指定分区数及副本数（不能大于broker数）

    ```
    bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic event_topic
    bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic event_topic      # 查看指定topic详情，包括分区、leader及副本数等
    bin/kafka-topics.sh --list --zookeeper localhost:2181      # 查看所有topic列表
    bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic event_topic      # 删除指定topic
    ```
  ![替代文字](https://box.worktile.com/view/3e0cc97f85df410c9e5b8a2c6ac34d5d?pid=f3e342be737d4beca87279c3f71a7a94)

1. 添加partition数

    ```
    bin/kafka-topics.sh --zookeeper localhost:2181 --alter --partitions  3 --topic event_topic
    ```
    ![替代文字](https://box.worktile.com/view/26f03dbf5f024c429803e2b815682ec8?pid=f3e342be737d4beca87279c3f71a7a94)

1. 启动producer及consumer测试

    ```
    bin/kafka-console-producer.sh --broker-list localhost:9092 --topic event_topic    # 启动producer，并输入信息
    bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic event_topic --from-beginning    # 从头读取信息
    ```

1. 查看指定topic的offset值，可指定partition，time选项`-1`为当前最新，`-2`为第一条offset值

    ```
    bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic event_topic --partitions 0 --time -1
    ```
    ![替代文字](https://box.worktile.com/view/1d68aa6a16c347a28bbdf8b4138f87f5?pid=f3e342be737d4beca87279c3f71a7a94)

1. 读取指定topic的指定partition的消息，可指定offset及最大消息数

    ```
    bin/kafka-run-class.sh kafka.tools.SimpleConsumerShell --broker-list localhost:9092 --topic event_topic --partition 5 --offset 2 --max-messages 10
    ```

1. 查看指定consumer的消息详情

    ```
    bin/kafka-consumer-offset-checker.sh --zookeeper localhost:2181 --topic event_topic --group test-consumer-group --broker-info
    ```
  ![替代文字](https://box.worktile.com/view/d8faa24dc49b448c831ab5b2ffd19218?pid=f3e342be737d4beca87279c3f71a7a94)




♦ 扩展阅读
	http://www.jasongj.com/2015/01/02/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/


