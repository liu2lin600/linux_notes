2016-12-12
# edit by liu2lin600

kafka

♦ 定义
	Apache kafka 是一个分布式的基于push-subscribe的消息系统，它实现了生产者(生产信息)和消费者(处理分析)之间的无缝连接，它具备快速、可扩展、可持久化的特点

	它现在是Apache旗下的一个开源系统，作为hadoop生态系统的一部分。它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/spark流式处理引擎

♦ 特点
	1. 高吞吐量、低延迟：kafka每秒可以生产约25万消息(50M)，每秒处理55万消息(110MB)，它的延迟最低只有几毫秒
	2. 可扩展性：kafka集群支持热扩展
	3. 持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失
	4. 容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）
	5. 高并发：支持数千个客户端同时读写

♦ 术语
	• Broker：Kafka集群包含一个或多个服务器，这种服务器被称为broker
	• Topic：每条发布到Kafka集群的消息都有一个类别，这个类别被称为topic。（物理上不同topic的消息分开存储，逻辑上一个topic的消息虽然保存于一个或多个broker上但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处）
	• Partition：parition是物理上的概念，每个topic包含一个或多个partition，创建topic时可指定parition数量。每个partition对应于一个文件夹，该文件夹下存储该partition的数据和索引文件
	• Producer：负责发布消息到Kafka broker
	• Consumer：消费消息。每个consumer属于一个特定的consumer group（可为每个consumer指定group name，若不指定group name则属于默认的group）。使用consumer high level API时，同一topic的一条消息只能被同一个consumer group内的一个consumer消费，但多个consumer group可同时消费这一消息

♦ 组件
	Kafka中发布订阅的对象是topic，可以为每类数据创建一个topic，把向topic发布消息的客户端称作producer，从topic订阅消息的客户端称作consumer。Producers和consumers可以同时从多个topic读写数据。一个kafka集群由一个或多个broker服务器组成，它负责持久化和备份具体的kafka消息

		• topic：消息存放的目录即主题
		• Producer：生产消息到topic的一方
		• Consumer：订阅topic消费消息的一方
		• Broker：Kafka的服务实例就是一个broker

	消息发送时都被发送到一个topic，其本质就是一个目录，而topic由是由一些Partition Logs(分区日志)组成,其组织结构如下图所示：

			+----------+ +-------------------------------+
			|partition1| |0|1|2|3|4|5|...                | <----+
			+----------+ +-------------------------------+ 		|
			+----------+ +-------------------------------+      |
	topic1	|partition2| |0|1|2|3|4|5|6|7...             | <----+ 写
			+----------+ +-------------------------------+      |
			+----------+ +-------------------------------+      |
			|partition3| |0|1|2|3|4|5|6|7|8...           | <----+
			+----------+ +-------------------------------+

			    old -----------------------------------> new

		• 每个Partition中的消息都是有序的，生产的消息被不断追加到Partition上，并赋予了一个唯一的offset值
		• Kafka集群会保存所有的消息，不管消息有没有被消费，可以设定消息的过期时间，只有过期的数据才会被自动清除
		• Kafka需要维持的元数据只有一个(消费消息在Partition中的offset值)，Consumer每消费一个消息，offset就会加1，其实消息的状态完全是由Consumer控制的，Consumer可以跟踪和重设这个offset值，这样的话Consumer就可以读取任意位置的消息
		• 把消息日志以Partition的形式存放有多重考虑，
			1. 方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了
			2. 就是可以提高并发，因为可以以Partition为单位读写了

♦ 分配

	1) Producer端使用zookeeper用来"发现"broker列表,以及和Topic下每个partition leader建立socket连接并发送消息.
    2) Broker端使用zookeeper用来注册broker信息,已经监测partitionleader存活性.
    3) Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息

♦ 消息传递保障
	• 最多一次：消息可能丢失，但永远不会重发
	• 至少一次：消息绝不会丢失，但有可能重新发送
	• 正好一次：这是人们真正想要的，每个消息传递一次且仅一次

♦ 与Zookeeper关系

	Kafka依赖Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance

 - Producer端使用zookeeper用来"发现"broker列表,以及和Topic下每个partition leader建立socket连接并发送消息.
 - Broker端使用zookeeper用来注册broker信息,已经监测partition leader存活性.
 - Consumer端使用zookeeper用来注册consumer信息,其中包括consumer消费的partition列表等,同时也用来发现broker列表,并和partition leader建立socket连接,并获取消息


♦ 常用参数

	broker.id=0 				# broker id
	port=9092 					# 端口
	log.dirs=/data/kafka 		# 数据位置
	zookeeper.connect= 			# zk连接配置
	log.retention.hours= 		# 数据保留时长
	log.retention.bytes= 		# 每个topic的保留，与保留时长同时生效，先达到条件先执行，-1为不限


♦ 常见操作

1. 官网下载并解压

    ```
    tar xf kafka_2.11-0.10.1.0.tgz
    cd kafka_2.11-0.10.1.0
    ```

1. 开启服务

    ```
    bin/zookeeper-server-start.sh config/zookeeper.properties          # 启动zookeeper
    bin/kafka-server-start.sh config/server.properties                 # 启动kafka服务
    ```

1. topic相关操作，创建时需指定zk服务(通常为zk集群，各服务用逗号隔开)，可指定分区数及副本数（不能大于broker数）

    ```
    bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic event_topic
    bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic event_topic      # 查看指定topic详情，包括分区、leader及副本数等
    bin/kafka-topics.sh --list --zookeeper localhost:2181      # 查看所有topic列表
    bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic event_topic      # 删除指定topic
    ```
  ![替代文字](https://box.worktile.com/view/3e0cc97f85df410c9e5b8a2c6ac34d5d?pid=f3e342be737d4beca87279c3f71a7a94)

1. 添加partition数

    ```
    bin/kafka-topics.sh --zookeeper localhost:2181 --alter --partitions  3 --topic event_topic
    ```
    ![替代文字](https://box.worktile.com/view/26f03dbf5f024c429803e2b815682ec8?pid=f3e342be737d4beca87279c3f71a7a94)

1. 启动producer及consumer测试

    ```
    bin/kafka-console-producer.sh --broker-list localhost:9092 --topic event_topic    # 启动producer，并输入信息
    bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic event_topic --from-beginning    # 从头读取信息
    ```

1. 查看指定topic的offset值，可指定partition，time选项`-1`为当前最新，`-2`为第一条offset值

    ```
    bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic event_topic --partitions 0 --time -1
    ```
    ![替代文字](https://box.worktile.com/view/1d68aa6a16c347a28bbdf8b4138f87f5?pid=f3e342be737d4beca87279c3f71a7a94)

1. 读取指定topic的指定partition的消息，可指定offset及最大消息数

    ```
    bin/kafka-run-class.sh kafka.tools.SimpleConsumerShell --broker-list localhost:9092 --topic event_topic --partition 5 --offset 2 --max-messages 10
    ```

1. 查看指定consumer的消息详情

    ```
    bin/kafka-consumer-offset-checker.sh --zookeeper localhost:2181 --topic event_topic --group test-consumer-group --broker-info
    ```
  ![替代文字](https://box.worktile.com/view/d8faa24dc49b448c831ab5b2ffd19218?pid=f3e342be737d4beca87279c3f71a7a94)


♦ 主要参数说明

#唯一标识在集群中的ID，要求是正数
broker.id=0
#服务端口，默认9092
port=9092
#监听地址，不设为所有地址
host.name=debugo01
 
# 处理网络请求的最大线程数
num.network.threads=2
# 处理磁盘I/O的线程数
num.io.threads=8
# 一些后台线程数
background.threads = 4
# 等待IO线程处理的请求队列最大数
queued.max.requests = 500
 
#  socket的发送缓冲区（SO_SNDBUF）
socket.send.buffer.bytes=1048576
# socket的接收缓冲区 (SO_RCVBUF) 
socket.receive.buffer.bytes=1048576
# socket请求的最大字节数。为了防止内存溢出，message.max.bytes必然要小于
socket.request.max.bytes = 104857600
 
############################# Topic #############################
# 每个topic的分区个数，更多的partition会产生更多的segment file
num.partitions=2
# 是否允许自动创建topic ，若是false，就需要通过命令创建topic
auto.create.topics.enable =true
# 一个topic ，默认分区的replication个数 ，不能大于集群中broker的个数。
default.replication.factor =1
# 消息体的最大大小，单位是字节
message.max.bytes = 1000000
 
############################# ZooKeeper #############################
# Zookeeper quorum设置。如果有多个使用逗号分割
zookeeper.connect=debugo01:2181,debugo02,debugo03
# 连接zk的超时时间
zookeeper.connection.timeout.ms=1000000
# ZooKeeper集群中leader和follower之间的同步实际
zookeeper.sync.time.ms = 2000
 
############################# Log #############################
#日志存放目录，多个目录使用逗号分割
log.dirs=/var/log/kafka
 
# 当达到下面的消息数量时，会将数据flush到日志文件中。默认10000
#log.flush.interval.messages=10000
# 当达到下面的时间(ms)时，执行一次强制的flush操作。interval.ms和interval.messages无论哪个达到，都会flush。默认3000ms
#log.flush.interval.ms=1000
# 检查是否需要将日志flush的时间间隔
log.flush.scheduler.interval.ms = 3000
 
# 日志清理策略（delete|compact）
log.cleanup.policy = delete
# 日志保存时间 (hours|minutes)，默认为7天（168小时）。超过这个时间会根据policy处理数据。bytes和minutes无论哪个先达到都会触发。
log.retention.hours=168
# 每个topic日志数据存储的最大字节数。超过这个时间会根据policy处理数据。
#log.retention.bytes=1073741824
 
# 控制日志segment文件的大小，超出该大小则追加到一个新的日志segment文件中（-1表示没有限制）
log.segment.bytes=536870912
# 当达到下面时间，会强制新建一个segment
log.roll.hours = 24*7
# 日志片段文件的检查周期，查看它们是否达到了删除策略的设置（log.retention.hours或log.retention.bytes）
log.retention.check.interval.ms=60000
 
# 是否开启压缩
log.cleaner.enable=false
# 对于压缩的日志保留的最长时间
log.cleaner.delete.retention.ms = 1 day
 
# 对于segment日志的索引文件大小限制
log.index.size.max.bytes = 10 * 1024 * 1024
#y索引计算的一个缓冲区，一般不需要设置。
log.index.interval.bytes = 4096
 
############################# replica #############################
# partition management controller 与replicas之间通讯的超时时间
controller.socket.timeout.ms = 30000
# controller-to-broker-channels消息队列的尺寸大小
controller.message.queue.size=10
# replicas响应leader的最长等待时间，若是超过这个时间，就将replicas排除在管理之外
replica.lag.time.max.ms = 10000
# 是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker
controlled.shutdown.enable = false
# 控制器关闭的尝试次数
controlled.shutdown.max.retries = 3
# 每次关闭尝试的时间间隔
controlled.shutdown.retry.backoff.ms = 5000
 
# 如果relicas落后太多,将会认为此partition relicas已经失效。而一般情况下,因为网络延迟等原因,总会导致replicas中消息同步滞后。如果消息严重滞后,leader将认为此relicas网络延迟较大或者消息吞吐能力有限。在broker数量较少,或者网络不足的环境中,建议提高此值.
replica.lag.max.messages = 4000
#leader与relicas的socket超时时间
replica.socket.timeout.ms= 30 * 1000
# leader复制的socket缓存大小
replica.socket.receive.buffer.bytes=64 * 1024
# replicas每次获取数据的最大字节数
replica.fetch.max.bytes = 1024 * 1024
# replicas同leader之间通信的最大等待时间，失败了会重试
replica.fetch.wait.max.ms = 500
# 每一个fetch操作的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会等待直到数据达到这个大小
replica.fetch.min.bytes =1
# leader中进行复制的线程数，增大这个数值会增加relipca的IO
num.replica.fetchers = 1
# 每个replica将最高水位进行flush的时间间隔
replica.high.watermark.checkpoint.interval.ms = 5000
 
# 是否自动平衡broker之间的分配策略
auto.leader.rebalance.enable = false
# leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡
leader.imbalance.per.broker.percentage = 10
# 检查leader是否不平衡的时间间隔
leader.imbalance.check.interval.seconds = 300
# 客户端保留offset信息的最大空间大小
offset.metadata.max.bytes = 1024
 
#############################Consumer #############################
# Consumer端核心的配置是group.id、zookeeper.connect
# 决定该Consumer归属的唯一组ID，By setting the same group id multiple processes indicate that they are all part of the same consumer group.
group.id
# 消费者的ID，若是没有设置的话，会自增
consumer.id
# 一个用于跟踪调查的ID ，最好同group.id相同
client.id = <group_id>
 
# 对于zookeeper集群的指定，必须和broker使用同样的zk配置
zookeeper.connect=debugo01:2182,debugo02:2182,debugo03:2182
# zookeeper的心跳超时时间，查过这个时间就认为是无效的消费者
zookeeper.session.timeout.ms = 6000
# zookeeper的等待连接时间
zookeeper.connection.timeout.ms = 6000
# zookeeper的follower同leader的同步时间
zookeeper.sync.time.ms = 2000
# 当zookeeper中没有初始的offset时，或者超出offset上限时的处理方式 。
# smallest ：重置为最小值 
# largest:重置为最大值 
# anything else：抛出异常给consumer
auto.offset.reset = largest
 
# socket的超时时间，实际的超时时间为max.fetch.wait + socket.timeout.ms.
socket.timeout.ms= 30 * 1000
# socket的接收缓存空间大小
socket.receive.buffer.bytes=64 * 1024
#从每个分区fetch的消息大小限制
fetch.message.max.bytes = 1024 * 1024
 
# true时，Consumer会在消费消息后将offset同步到zookeeper，这样当Consumer失败后，新的consumer就能从zookeeper获取最新的offset
auto.commit.enable = true
# 自动提交的时间间隔
auto.commit.interval.ms = 60 * 1000
 
# 用于消费的最大数量的消息块缓冲大小，每个块可以等同于fetch.message.max.bytes中数值
queued.max.message.chunks = 10
 
# 当有新的consumer加入到group时,将尝试reblance,将partitions的消费端迁移到新的consumer中, 该设置是尝试的次数
rebalance.max.retries = 4
# 每次reblance的时间间隔
rebalance.backoff.ms = 2000
# 每次重新选举leader的时间
refresh.leader.backoff.ms
 
# server发送到消费端的最小数据，若是不满足这个数值则会等待直到满足指定大小。默认为1表示立即接收。
fetch.min.bytes = 1
# 若是不满足fetch.min.bytes时，等待消费端请求的最长等待时间
fetch.wait.max.ms = 100
# 如果指定时间内没有新消息可用于消费，就抛出异常，默认-1表示不受限
consumer.timeout.ms = -1
 
#############################Producer#############################
# 核心的配置包括：
# metadata.broker.list
# request.required.acks
# producer.type
# serializer.class
 
# 消费者获取消息元信息(topics, partitions and replicas)的地址,配置格式是：host1:port1,host2:port2，也可以在外面设置一个vip
metadata.broker.list
 
#消息的确认模式
# 0：不保证消息的到达确认，只管发送，低延迟但是会出现消息的丢失，在某个server失败的情况下，有点像TCP
# 1：发送消息，并会等待leader 收到确认后，一定的可靠性
# -1：发送消息，等待leader收到确认，并进行复制操作后，才返回，最高的可靠性
request.required.acks = 0
 
# 消息发送的最长等待时间
request.timeout.ms = 10000
# socket的缓存大小
send.buffer.bytes=100*1024
# key的序列化方式，若是没有设置，同serializer.class
key.serializer.class
# 分区的策略，默认是取模
partitioner.class=kafka.producer.DefaultPartitioner
# 消息的压缩模式，默认是none，可以有gzip和snappy
compression.codec = none
# 可以针对默写特定的topic进行压缩
compressed.topics=null
# 消息发送失败后的重试次数
message.send.max.retries = 3
# 每次失败后的间隔时间
retry.backoff.ms = 100
# 生产者定时更新topic元信息的时间间隔 ，若是设置为0，那么会在每个消息发送后都去更新数据
topic.metadata.refresh.interval.ms = 600 * 1000
# 用户随意指定，但是不能重复，主要用于跟踪记录消息
client.id=""
 
# 异步模式下缓冲数据的最大时间。例如设置为100则会集合100ms内的消息后发送，这样会提高吞吐量，但是会增加消息发送的延时
queue.buffering.max.ms = 5000
# 异步模式下缓冲的最大消息数，同上
queue.buffering.max.messages = 10000
# 异步模式下，消息进入队列的等待时间。若是设置为0，则消息不等待，如果进入不了队列，则直接被抛弃
queue.enqueue.timeout.ms = -1
# 异步模式下，每次发送的消息数，当queue.buffering.max.messages或queue.buffering.max.ms满足条件之一时producer会触发发送。
batch.num.messages=200


♦ 扩展阅读
	http://www.jasongj.com/2015/01/02/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/


