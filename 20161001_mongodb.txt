2016-10-01
# edit by liu2lin600

MongoDB：

♦ 大数据问题：
	▫ 数据库分类：
		1. 并行数据库：水平切分、分区查询
		2. NoSQL数据库：Mongodb、redis... 非关系模型、分布式、不支持ACID
		3. NewSQL数据库：Clustrix、GenieDB、ScaleBase、NimbusDB、Drizzle...
		4. 去数据管理：

	▫ 大数据分析处理：
		MapReduce

	▫ ACID理论：原子性、强一致性、隔离性、
	▫ CAP理论：一致性、可用性、网络分区容错性
	▫ BASE理论：基本可用，软状态、最终一致性
		最终一致性：因果一致、读自己写一致、会话一致、单调读一致

	▫ 数据一致性的实现技术：
		1. Quorum系统NRW策略
			N：总的副本数
			R：完成读操作所需读取的最少副本数
			W：完成写操作所需写入的最少副本数

			强一致性：R+W>N
				MySQL: 一主两从

			R+W<=N：最多只能保证最终一致性

		2. 两段式提交：2PC （Two Phase Commit Protocol)

			有两类节点：
				一类为协调者
				一类为事务参与者

				两段：
					第一阶段：请求阶段
					第二阶段：提交阶段
		3. Paxos: 
		4. Vector Clock

♦ NoSQL的数据存储模型：
	1. 键值模型：
		数据模型：key-value存储
		优点：查找速度快
		缺点：数据无结构，通常只被当作字符串或二进制数据
		应用场景：内容缓存
		实例：Redis, Dynamo, Riak

	2. 列式模型：
		数据模型：数据按列存储，将同一列数据存在一起
		优点：查找迅速、可扩展性强、易于实现分布式
		缺点：功能相对SQL很有限
		应用场景：分布式文件系统或分布式存储
		实例：Bigtable, Cassandra, HBase, Hypertable

	3. 文档模型：
		数据模型：与键值模型类似，value指向结构化数据
		优点：数据格式要求不严格，无需事先定义结构
		缺点：查询性能不高，缺乏统一查询语法
		应用场景：非强事务需求的web应用
		实例：MongoDB, ElasticSearch、CouchDB

	4. 图式模型：
		数据模型：图结构模型
		优点：利用图结构相关算法提高性能，并足特殊场景应用需求
		缺点：难以实现分布式，功能有定向性
		应用场景：社交网络、推荐系统、关系图谱
		实例：Neo4J

	更多查看：www.nosql-database.org

♦ MongoDB：
	▫ 特点：
		JSON
		C++、全索引、不支持事务、内存
		复制，自动分片...

	▫ 安装配置：
		• 程序包：
			源码：(centos7) https://www.mongodb.org/dl/linux/x86_64-rhel70
			rpm包：epel源直接提供
				mongodb-org
				mongodb-org-server
				mongodb-org-mongos
				mongodb-org-shell
				mongodb-org-tools

		• 程序文件：
			mongod 		# 主进程

		• 配置文件：
			mongod.conf 	# 主配置文件

			主要配置项：
				fork = true 			# 后台运行
				#bindip = 127.0.0.1 	# 监听地址
				#port = 27017 			# 端口
				dbpath = /mongodb/data 	# 数据路径
				pidfilepath =  			# pid路径
				logpath =  				# 日志路径
				logappend={true|false}  # true表示以追加方式记录日志，即不覆盖
				auth = 					# 是否启用认证

				# 副本集设置
				replSet = SET_NAME
				replIndexPrefetch = 

	▫ 相关术语：
		database：数据库，无需手动创建
		collection：同mysql中的表，存储内容为json文档
		document：同mysql中的行，以json格式存放，默认会添加"_id"字段
		field：字段
		index：索引

	▫ 常用命令：mongo shell方式
		> help
		> db.help()
		> use db_name
		> db.stats()
		> db.serverStatus()
		> show dbs
		> show collectionNames()
		> db.getCollectionNames()


		# 以下COLL_NAME为指定的collection名称
		> db.COLL_NAME.insert({name:"lily"})
		> db.COLL_NAME.find()
		> db.COLL_NAME.findOne()
		> db.COLL_NAME.update()
		> db.COLL_NAME.remove()
		> db.COLL_NAME.drop()
		> db.COLL_NAME.count()
		...

		find()高级用法：
			1. 比较：$gt, $gte, $lt, $lte, $ne
				{FIELD: {$gt: VALUE}}

			2. 范围：$in, $nin
				{FIELD: {$in: [10,60]}}

			3. 逻辑：$or, $and, $not, $nor
				{$or: [{expr1}, {expr2}...]}

			4. 元素查询：
				$exists 
					{FIELD: {$exists: BOOL_expr}}
				
				$type: 1 Double, 2 String, 3 Object, Array, Binary data, Boolean...
					{FIELD: {$type: XX}}

		更新操作：update()
			$set：修改字段值 	{FIELD: value},{$set: {FIELD: NEW_value}}
			$unset：删除字段 	{FIELD: value},{$unset: {FIELD1, FIELD2...}}
			$rename：更改字段名 {$rename: {oldname: newname,...}}

		删除操作：remove(), drop(), dropDatabase()
			remove() 		删除数据
			drop()   		删除表
			dropDatabase() 	删除库

		连续操作：
			db.COLL_NAME.find().limit().skip()...

	▫ 索引：
		• 支持类型：
			1. 单字段索引
			2. 组合索引(多字段)
			3. 多键索引: 单字段值存在多个值
			4. 空间索引
			5. 全文索引
			6. 哈希索引: 只支持精确查找

		创建索引参数：
			background：是否后台创建
			unique：	是否建立的索引是否唯一
			name：      索引的名称
			dropDups：	建立唯一索引时是否删除重复记录
			sparse：	是否使用稀梳格式索引
			weights：	权重，1-99
			expireAfterSeconds：生存时间

			如：db.test.ensureIndex({open: 1, close: 1}, {background: true})

		• 相关命令：
			db.COLL.ensureIndex() 		# 创建索引
			db.COLL.getIndexes() 		# 查看所有索引
			db.COLL.dropIndexes() 		# 删除所有索引
			db.COLL.dropIndex() 		# 删除指定索引
			db.COLL.reIndex() 			# 修改指定索引
			
	▫ mongod进程常用选项：mongod --help
		fork={true|false} 		# 是否运行在后台
		bindip=IP 				# ip
		port=PORT 				# 默认为27017
		maxConns= 				# 最大并发
		...

	▫ 复制：
		• 主从复制：master/slave，基本已废弃
		• 副本集：服务于同一数据集的多个mongodb实例
			主节点：将数据修改操作保存到oplog中
			从节点：从oplog复制应用于本地
			仲裁节点：

			◦ 工作特性：
				至少3个节点，且为奇数，使用仲裁节点来参与选举
				heartbeat心跳检测，2s，自动失效转移

			◦ 节点分类：
				1. 0优先级节点：冷备节点，不会被选为主节点，但可参与选举
				2. 被隐藏的从节点：首先是一个0优先级从节点，对客户端不可见
				3. 延迟复制从节点：0优先级从节点，且复制时间退后于主节点
				4. 仲裁节点：只参与选举，无数据

			◦ 复制架构：
				1. oplog：大小固定，存在local数据库，主从节点都有
					(1) 初始同步（initial sync）
					(2) 回滚后追赶（post-rollback catch-up）
					(3) 切分块迁移（sharding chunk migrations）

				2. heartbeat：心跳检测
				3. local：存放副本集所有元数据和oplog，oplog.rs
					
			◦ 数据同步类型：
				I. 初始同步：
					发生情景：
						1. 从节点没有数据
						2. 从节点丢失副本复制历史

					步骤：
						1. 克隆所有数据库
						2. 复制oplog并应用在本地
						3. 为所有collection构建索引

				II. 复制：支持多线程

			◦ 重新选举的影响条件：
				心跳超时："health": 0,表示节点离线，主节点离线，重新选举
				优先级：优先级高的节点优先成为主节点
				optime：某成员节点最近一次应用本地oplog条目的时间戳
				网络连接：当网络发生故障，副本集分裂，票数多的一方，才具有选举主节点的权利
				网络分区：

			◦ 触发选举的事件：
				1. 新副本集初始化时
				2. 从节点联系不到主节点时
				3. 主节点主动"下台"时:
					(1) 主节点收到stepDown()命令时
					(2) 某从节点有更高的优先级且已经满足成为主节点的其他所有条件
					(3) 主节点无法联系到副本集的"多数方"

		• 复制集配置：
			复制相关参数：mongod.conf
				relSet=NAME
				replIndexPrefetch=

				dbpath =  				# 数据目录

			相关命令：
				> rs.help()
				> rs.status()
				> rs.initiate()
				> rs.conf()
				> rs.add() 					# 添加从节点
				> rs.addArb() 				# 添加为仲裁节点
			    > rs.remove() 
				> rs.slaveOk()
				> rs.stepDown([second])

				如：
					rs.initiate({_id:"testSet",members:[{'_id':1,'host':"172.16.60.72:27017"}]})
					rs.add('172.16.60.73:27017')

			优先级设置：在主节点上设置
				> cfg=rs.conf() 				# 保存当前配置
				> cfg.members[1].priority=3 	# 设置第2个节点优先级为3
				> rs.reconfig(cfg) 				# 重新加载配置

	▫ 分片Sharding：

		组成：
			mongos：路由请求到合适的分片上，不负责数据处理，2个节点以上
			config server：元数据服务器，3个节点
			shard：数据节点，也称为mongod实例节点，2个节点以上，确保高可用，每个shard需为副本集

		基于不同方式切片：
			范围：range
			列表：list
			哈希：hash
		
			尽可能做到写离散、读集中

		配置：mongod.conf
			1. config server：默认监听在27019/tcp
				dpath=
				configsvr=true	

			2. mongos：
				只需安装mongodb-mongos程序包

				启动：mongos --configdb=HOST[:PORT] --fork --logpath=/PATH/TO/LOGDIR
				  or：mongos -f /etc/mongod.conf

				连接：mongo --host HOST [--port PORT]

				> sh.help()
				> sh.status()
				> sh.addShard()
				> sh.enableSharding()

			3. shard：
				常规配置后启动，在mongos中添加进去

		使用示例：
			1. 查看shard集群的当前状态：
				mongos> sh.status()
				--- Sharding Status --- 
				  sharding version: {
					"_id" : 1,
					"version" : 3,
					"minCompatibleVersion" : 3,
					"currentVersion" : 4,
					"clusterId" : ObjectId("526cde9aaddce4c0803865c8")
				}
				  shards:
				  databases:
					{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }

			2. 添加shard：
				mongos> sh.addShard("172.16.100.17")
				{ "shardAdded" : "shard0000", "ok" : 1 }
				...
				
				mongos> sh.status()
				--- Sharding Status --- 
				  sharding version: {
					"_id" : 1,
					"version" : 3,
					"minCompatibleVersion" : 3,
					"currentVersion" : 4,
					"clusterId" : ObjectId("526cde9aaddce4c0803865c8")
				}
				  shards:
					{  "_id" : "shard0000",  "host" : "172.16.100.17:27017" }
					{  "_id" : "shard0001",  "host" : "172.16.100.18:27017" }
				  databases:
					{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }

			3. 启动database的sharding功能：
				mongodb的shard功能实现于collection级别，但若要在collection上启动shard，还需要事先其相关的数据库上启用之。在数据库上启用shard功能后，MongoDB会为其指定一个主shard

				sh.enableSharding("<database>")
				
				or：
					db.runCommand( { enableSharding: <database> } )

			4. 测试数据：
				for (i = 1; i <= 1000000; i++) db.users.insert({age:(i%100), name:"user"+i, address:i+", Some Road, Beijing", country:"China", course:"cousre"+"(i%12)"})


