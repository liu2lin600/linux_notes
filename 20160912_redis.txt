2016-09-12
# edit by liu2lin600


♦ NoSQL：
    non SQL ==> Not Only SQL (Web 2.0时期)

    • 数据变化：
        数据量大
        数据变化非常化(数据增长化、流量分布变化变、数据间耦合结构变化快)
        数据源很多
        
    • NoSQL分类：
        1. k/v：Dynamo(亚马逊), redis 
        2. column Family：列式数据库 hbase
        3. document：文档数据库 mongodb
        4. GraphDB：图式数据库

♦ Redis：
    REmote DIctionary Server，数据结构服务器，k/v型存储，单进程，可持久化

    • 数据结构特点：
        内存存储：in-memroy
        持久化  ：RDB(snapshoting), AOF(apend only file)
        主从    ：sentinel，主读写，从写
        集群    ：shard，redis3.0后

    • 与memcached相比：
        1. redis优势
            可存储更丰富的数值类型
            内建主从复制及集群
            支持就地更新数据
            可持久化

        2. memcached优势
            多线程，可更好利用多核cpu及更少阻塞
            更少的内存开销
            更少的内存分配压力
            可能有更少的内存碎片
    
    • 程序环境：
            redis.conf              # 主服务配置文件
            redis-sentinel.conf     # 配置主从配置文件

            redis-server            # 主程序，默认监听 6379/tcp
            redis-cli               # 客户端命令
            redis-benchmark         # 测试工具
            redis-check-dump        # 检测
            redis-check-aof

        注：对于源码包而言，只要下载解压并cd进去，再执行make命令即可在当前目录下生成src目录包括相关命令
            
    • 键值：k/v
        key：直接ASCII字符串
        value：string, list, hashe, set, sorted set, bitmap, hyperloglog
        
        获取帮助：
            help @<group>  ：查看一个组的命令集
            help <command> ：查看指定命令
            help <tab>     ：自动补全可能的命令
            quit           ：退出
        
            @group：
                @generic    : DEL, DUMP, SCAN, SORT, TTL, TYPE...
                @string     : SET, GET, EXISTS, INCR, DECR...
                @list       : LPUSH, RPUSH, LPOP, RPOP, LINDEX, LSET...
                @hash       : HSET, HMSET, HGET, HMGET, HKEYS, HVALS, HDEL, HGETALL...
                @set        : SADD, SPOP, SREM , SRANDMEMBER, SINTER, SUNION...
                @sorted_set : ZADD, ZCARD, ZCOUNT, ZRANK...
            
    • 配置和使用Redis：
        基本配置、网络配置、持久化配置、复制配置、安全配置、限制配置、SLOWLOG配置、包含配置、高级配置
        
        1. 通用配置项：
            · deamonize ：是否启动为守护进程
            · supervised：no|upstart|systemd|auto
            · loglevel  ：记录日志级别
            · pidfile   ：pid文件
            · logfile   ：日志路径
            · databases ：数据库数量，默认16个，每个数据库的名为整数，从0开始，默认数据库为0
            
            切换数据库的方法：SELECT <dbid>
                 
        2. 网络配置项：
            · bind IP         ：监听地址，0.0.0.0为本机所有地址
            · port PORT       ：监听端口，默认6379
            · tcp-backlog     ：后援队列长度
            · unixsocket      ：unix通讯文件
            · timeout         ：连接的空闲超时时长
            
        3. 安全配置项：
            · requirepass <PASSWORD>                    ：密码连接
            · rename-command <COMMAND> <NEW_CMND_NAME>  ：重命令名一个命令
                在AOF或复制环境中，不推荐使用
                
        4. 限制配置项：
            · maxclients <num>        ：最大客户端并发
            · maxmemory <bytes>       ：最大内存空间
            · maxmemory-samples 5     ：淘汰算法运行时的采样样本数
            · maxmemory-policy        ：淘汰策略
                可用淘汰策略：volatile-lru, allkeys-lru, volatile-random, allkeys-random, volatile-ttl, noeviction
                
        5. SlowLog配置项：
            · slowlog-log-slower-than 10000   ：单位是微秒
            · slowlog-max-len 128             ：SlowLog记录的日志最大条目
                
        6. 高级配置项：
            · hash-max-ziplist-entries 512    ：ziplist个数上限
            · hash-max-ziplist-value 64       ：每个ziplist的键值的最大空间
            
            · client-output-buffer-limit normal 0 0 0           ：正常输出缓冲限制
            · client-output-buffer-limit slave 256mb 64mb 60    ：从服务 
            · client-output-buffer-limit pubsub 32mb 8mb 60     ：订阅
                <hard-limit> <soft-limit> <soft-limit seconds>
                
    • 命令使用：        
        ► redis-cli命令：
            redis-cli [OPTIONS] [cmd [arg [arg ...]]]

            [OPTIONS]
                -h HOST
                -p PORT
                -a PASSWORD
                -n DBID
            
        ► 与连接相关命令：
            AUTH <password> ：输入密码
            ECHO <message>  ：输出
            PING            ：查看是否连接成功
            QUIT            ：退出
            SELECT dbid     ：切换到指定库
            
        ► 清空数据库：慎用
            FLUSHDB     ：清空当前数据库
            FLUSHALL    ：清空所有数据库
             
        ► Server相关的命令：
            CLIENT GETNAME  ：获取当前客户端名
            CLIENT KILL     ：关闭指定客户端连接
            CLIENT LIST     ：客户端列表
            CLIENT PAUSE    ：
            CLIENT REPLY    ：
            CLIENT SETNAME  ：设置当前连接名

            SLOWLOG GET 10  ：获取大于10ms的慢查询
             
            CONFIG GET          ：获取指定配置值
            CONFIG SET          ：设置指定配置
            CONFIG RESETSTAT    ：重置状态
            CONFIG REWRITE      ：重写

        ► 持久化：
            save            ：将数据同步保存到磁盘
            bgsave          ：将数据异步保存到磁盘
            lastsave        ：返回上次成功将数据保存到磁盘的Unix时戳
            shutdown        ：将数据同步保存到磁盘，然后关闭服务
        
        ► 远程服务控制：
            info                ：提供服务器的信息和统计 **信息内容见底附录，可视化监控程序有redis-stat,redis live
            info commandstats   ：查看命令使用次数
            monitor             ：实时转储收到的请求
            slaveof             ：改变复制策略设置
            config              ：在运行时配置Redis服务器
             
    • Redis持久化：
        1. RDB：snapshotting 快照
            二进制格式；按事先定制的策略，周期性地将数据从内存同步至磁盘，数据文件默认为dump.rdb，客户端显式使用SAVA或BGSAVE命令来手动启动快照保存机制
                SAVE  ：同步，即在主线程中保存快照，此时会阻塞所有客户端请求
                BGSAVE：异步
        2. AOF：Append Only File 
            记录每次写操作至指定的文件尾部实现的持久化；当redis重启时，可通过重新执行文件中的命令在内存中重建出数据库
                BGREWRITEAOF：AOF文件重写
                    不会读取正在使用AOF文件，而是通过将内存中的数据以命令的方式保存至临时文件中，完成之后替换原来的AOF文件
                    
        ► RDB相关的配置：
            · save <seconds> <changes>：

                save ''         ：关闭快照持久化
            
                save 900 1      ：900s内至少有一个key有变化
                save 300 10     ：300s内至少有10个key有变化
                save 60 10000   ：60s内至少有1W个key发生变化
                
                    ✽ 注：表示以上3个策略满足其中任意一个均会触发快照操作
                
            · stop-writes-on-bgsave-error yes：
                dump操作出现错误时，是否禁止新的写入操作请求
                
            · rdbcompression yes    ：是否压缩
            · rdbchecksum yes       ：是否校验
            · dbfilename dump.rdb   ：指定rdb文件名
            · dir /var/lib/redis    ：rdb文件的存储路径
            
        ► AOF相关的配置：
            · appendonly no：默认关闭aof功能，建议开启
            · appendfilename "appendonly.aof"：
            
            · appendfsync ：
                no：redis不执行主动同步操作，而是OS进行
                everysec：每秒一次
                always：每语句一次
                    
            · no-appendfsync-on-rewrite no：
                是否在后台执行aof重写期间调用fsync，默认为no
                
            · auto-aof-rewrite-percentage 100 ：
            · auto-aof-rewrite-min-size 64mb  ：
                上述两个条件同时满足时，方会触发重写AOF，与上次aof文件大小相比，其增长量超过100%，且大小不少于64MB;
                
            · aof-load-truncated yes：自动修剪
            
        ✽ 注意：持久机制本身不能取代备份，应该制订备份策略，对redis库定期备份
        
        ✽ RDB与AOF同时启用： 
            (1) BGSAVE和BGREWRITEAOF不会同时进行
            (2) Redis服务器启动时用持久化的数据文件恢复数据，会优先使用AOF
            
    • Redis主从复制：
        ► 特点：
            1. 一个Master可以有多个slave主机，支持链式复制
            2. Master以非阻塞方式同步数据至slave主机
            
        ► 命令行配置slave节点：
            redis-cli> SLAVEOF <MASTER_IP> <MASTER_PORT>
            redis-cli> CONFIG SET masterauth <PASSWORD>
            
        ► 配置参数：
            · slaveof       ：设置主服务
            · masterauth    ：密码
            
            · slave-serve-stale-data yes    ：
            · slave-read-only yes           ：从服务只读
            · repl-diskless-sync no         ：
                no, Disk-backed, Diskless
            
            · repl-diskless-sync-delay 5    ：
            · repl-ping-slave-period 10     ：
            
            · repl-timeout 60               ：复制超时时长
            · repl-disable-tcp-nodelay no   ：
            · repl-backlog-size 1mb         ：
            
            · slave-priority 100            ：从服务优先级
            · min-slaves-to-write 3         ：
            · min-slaves-max-lag 10         ：
            
    • redis-sentinel：监控、通知、自动故障转移，单独的服务
        选举机制使用流言协议、投票协议

        ► 相关配置项：
            · sentinel monitor <master-name> <ip> <redis-port> <quorum>     ：
            · sentinel down-after-milliseconds <master-name> <milliseconds> ：
                监控到指定的集群的主节点异常状态持续多久方才将标记为'故障'
            · sentinel parallel-syncs <master-name> <numslaves>             ：
                指在failover过程中，能够被sentinel并行配置的从节点的数量
            · sentinel failover-timeout <master-name> <milliseconds>        ：
                sentinel必须在此指定的时长内完成故障转移操作，否则，将视为故障转移操作失败

                注：至少配置以上4项，可监控多组集群，如下
                    sentinel monitor master_1 172.16.60.1 6379 2
                    sentinel down-after-milliseconds master_1 60000
                    sentinel failover-timeout master_1 180000
                    sentinel parallel-syncs master_1 1

                    sentinel monitor master_2 172.16.60.11 6380 4
                    sentinel down-after-milliseconds master_2 10000
                    sentinel failover-timeout master_2 180000
                    sentinel parallel-syncs master_2 5
                
            · port 26379                                                ：默认监听端口
            · sentinel auth-pass <master-name> <password>               ：主服务器密码
            · sentinel notification-script <master-name> <script-path>  ：通知脚本
                
        ► 命令：
            redis-cli -h SENTINEL_HOST -p SENTINEL_PORT 

            redis-cli> SENTINEL masters                 # 查看主节点
            redis-cli> SENTINEL slaves <MASTER_NAME>    # 查看从节点
            redis-cli> SENTINEL failover <MASTER_NAME>  # 手动故障转移
            redis-cli> SENTINEL get-master-addr-by-name <MASTER_NAME>  # 获取主节点地址
            
    • 常用操作实例：
        0. key 键
            RANDOMKEY           # 随机获取一个key
            DBSIZE              # 显示当前库总量，O(1)
            keys *              # 显示所有键，量大时慎用，也可使用通配符
            EXISTS phone        # 是否存在指定键
            DEL name            # 删除指定键
            DEL name type       # 删除多个键
            KEYS *ab            # 模糊查找键 
            MOVE name 3         # 把指定键移动到指定数据库
            RENAME age ages     # 重命名
            EXPIRE key 1008     # 设置过期时长
            TTL key             # 查看有效期
            TYPE key            # 查看键类型

        1. string 字符串
            SET name lily       # 设置键值
            GET name            # 获取指定键的值
            MSET a 1 b 2        # 设置多个键值
            MGET a b            # 获取多个键值
            INCR num            # 指定键值加1
            INCRBY num 3        # 以指定步径增加
            STRLEN name         # 查看字符串长度
            GETRANGE name 2 4   # 从指定位置开始获取指定长度

        2. list 列表
            rpush(key, value)                   ：在名称为key的list尾添加一个值为value的元素
            lpush(key, value)                   ：在名称为key的list头添加一个值为value的 元素
            llen(key)                           ：返回名称为key的list的长度
            lrange(key, start, end)             ：返回名称为key的list中start至end之间的元素
            ltrim(key, start, end)              ：截取名称为key的list
            lindex(key, index)                  ：返回名称为key的list中index位置的元素
            lset(key, index, value)             ：给名称为key的list中index位置的元素赋值
            lrem(key, count, value)             ：删除count个key的list中值为value的元素
            lpop(key)                           ：返回并删除名称为key的list中的首元素
            rpop(key)                           ：返回并删除名称为key的list中的尾元素
            blpop(key1, key2,… key N, timeout)  ：lpop命令的block版本。
            brpop(key1, key2,… key N, timeout)  ：rpop的block版本。
            rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部

        3. hash 哈希
            hset(key, field, value)         ：向名称为key的hash中添加元素field
            hget(key, field)                ：返回名称为key的hash中field对应的value
            hmget(key, (fields))            ：返回名称为key的hash中field i对应的value
            hmset(key, (fields))            ：向名称为key的hash中添加元素field 
            hincrby(key, field, integer)    ：将名称为key的hash中field的value增加integer
            hexists(key, field)             ：名称为key的hash中是否存在键为field的域
            hdel(key, field)                ：删除名称为key的hash中键为field的域
            hlen(key)                       ：返回名称为key的hash中元素个数
            hkeys(key)                      ：返回名称为key的hash中所有键
            hvals(key)                      ：返回名称为key的hash中所有键对应的value
            hgetall(key)                    ：返回名称为key的hash中所有的键（field）及其对应的value

        4. set 集合
            sadd(key, member)               ：向名称为key的set中添加元素member
            srem(key, member)               ：删除名称为key的set中的元素member
            spop(key)                       ：随机返回并删除名称为key的set中一个元素
            smove(srckey, dstkey, member)   ：移到集合元素
            scard(key)                      ：返回名称为key的set的基数
            sismember(key, member)          ：member是否是名称为key的set的元素
            sinter(key1, key2,…key N)       ：求交集
            sinterstore(dstkey, (keys))     ：求交集并将交集保存到dstkey的集合
            sunion(key1, (keys))            ：求并集
            sunionstore(dstkey, (keys))     ：求并集并将并集保存到dstkey的集合
            sdiff(key1, (keys))             ：求差集
            sdiffstore(dstkey, (keys))      ：求差集并将差集保存到dstkey的集合
            smembers(key)                   ：返回名称为key的set的所有元素
            srandmember(key)                ：随机返回名称为key的set的一个元素ER

        5. sorted set 有序集合
            ZADD
            ZRANGE
            ZCARD
            ZRANK

        ► 测试：
            redis-cli debug oom                     # 模拟oom
            redis-cli debug segfault                # 模拟宕机
            127.0.0.1:6379> debug populate 10000    # 快速产生数据
            127.0.0.1:6379> debug reload            # 模拟rdb恢复
            127.0.0.1:6379> debug loadaof           # 模拟aof恢复


附录：
1. redis info 信息

127.0.0.1:6479> info
# Server 服务端信息
redis_version:3.0.5
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:18f0d2d878f697da
redis_mode:standalone                               # 运行模式
os:Linux 2.6.32-504.30.3.el6.x86_64 x86_64
arch_bits:64
multiplexing_api:epoll
gcc_version:4.4.7
process_id:20819
run_id:c3b30bc521cb3455e6f848dc2eb83f12261ab546     # Redis的随机标识符(用于sentinel和集群)
tcp_port:6479
uptime_in_seconds:28841753                          # Redis运行时长
uptime_in_days:333                                  # 运行天数
hz:10
lru_clock:3892860                                   # 以分钟为单位的自增时钟,用于LRU管理
config_file:/home/sa_standalone/sa/redis/conf/redis_6479.conf

# Clients 客户端信息
connected_clients:4                 # 已连接客户端的数量
client_longest_output_list:0        # 当前连接的客户端中最长的输出列表
client_biggest_input_buf:0          # 当前连接的客户端中最大的输出缓存
blocked_clients:0                   # 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量

# Memory 内存信息
used_memory:4096000016              # 分配器分配的内存总量
used_memory_human:3.81G
used_memory_rss:3874607104          # 常驻内存集大小
used_memory_peak:4096036776         # Redis 的内存消耗峰值
used_memory_peak_human:3.81G
used_memory_lua:36864               # LUA引擎所使用的内存
mem_fragmentation_ratio:0.95        # used_memory_rss/used_memory 
mem_allocator:jemalloc-3.6.0

# Persistence 持久化
loading:0
rdb_changes_since_last_save:5104
rdb_bgsave_in_progress:0
rdb_last_save_time:1497064892
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:37
rdb_current_bgsave_time_sec:-1
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_current_size:176265             # AOF 文件目前的大小
aof_base_size:176265                # 服务器启动时或者 AOF 重写最近一次执行之后，AOF 文件的大小
aof_pending_rewrite:0               # 是否有 AOF 重写操作在等待 RDB 文件创建完毕之后执行
aof_buffer_length:0                 # AOF 缓冲区的大小
aof_rewrite_buffer_length:0         # AOF 重写缓冲区的大小
aof_pending_bio_fsync:0             # 后台 I/O 队列里面，等待执行的 fsync 调用数量
aof_delayed_fsync:0                 # 被延迟的 fsync 调用数量
loading_start_time:1441769386       # loading启动时间戳
loading_total_bytes:1787767808      # loading需要加载数据量
loading_loaded_bytes:1587418182     # 已经加载的数据量
loading_loaded_perc:88.79           # 加载百分比
loading_eta_seconds:7               # 剩余时间

# Stats 状态信息
total_connections_received:733436   # 服务器累计接受的连接请求数量
total_commands_processed:621074745  # 服务器已执行的命令数量
instantaneous_ops_per_sec:42        # 服务器每秒钟执行的命令数量
total_net_input_bytes:84274500496
total_net_output_bytes:30142117574
instantaneous_input_kbps:9.07
instantaneous_output_kbps:0.40
rejected_connections:0              # 因为最大客户端数量限制而被拒绝的连接请求数量
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:12110423               # 因为过期而被自动删除的数据库键数量
evicted_keys:1871511                # 因为最大内存容量限制而被驱逐（evict）的键数量
keyspace_hits:210613161             # 查找数据库键成功的次数。可以计算命中率
keyspace_misses:1512380333          # 查找数据库键失败的次数
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:78324              # 最近一次 fork() 操作耗费的毫秒数
migrate_cached_sockets:0

# Replication 主从信息
role:master
connected_slaves:0
master_repl_offset:0
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

# CPU 
used_cpu_sys:20529.38
used_cpu_user:14634.80
used_cpu_sys_children:32095.58
used_cpu_user_children:396747.78

# Cluster
cluster_enabled:0

# Keyspace 统计信息
db0:keys=25227514,expires=1257630,avg_ttl=42573590
db1:keys=5,expires=0,avg_ttl=0