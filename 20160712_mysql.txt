2016-07-12
# edit by liu2lin600

MySQL数据库


程序=指令+数据
       ｜   ｜
程序=算法+数据结构

文本数据库缺陷：
    数据冗余和不一致
    数据访问困难
    数据孤立
    完整性问题
    原子性问题
    并发访问问题
    安全性问题

数据模型：
    层次模型
    网状模型
    关系模型:库，表
    非关系型:NoSQL(Not Only SQL)

DMBS：DataBase Management System 数据库管理系统
    用户 <--> 逻辑层 <--> 物理层

    DBMS的优点：
        数据独立性
        高效数据存取
        数据完整性和安全性
        数据管理
        并发存储和故障恢复
        开发周期缩短

    DBMS管理系统的结构：C/S架构

    关系数据库的组件：
        库：表的集合
            每个表都有一个惟一名字
        表：行（row, record, tuple）和列（field, column, attribute）
            行：代表一组之间联系
            列：有其允许取值的集合，称之为该属性域
                空：null

    数据库模式和数据库实例：
        逻辑角度：students(SID,Name,Gender,Age,Class)
        物理角度：模式中的数据

    约束：
        候选键（码）
        主键(primary key)
        惟一键(unique key)
        外键(foreign key): 引用性约束

    关系型查询语言：SQL
        
        关系运算：
            选择：挑选出符合指定条件行
            投影：挑选出关心的列

        连接运算：
            笛卡尔积：从两个输入关系中输出所有的元组对（无论它们在共同的属性上取值是否相同），因此，也被称为交叉连接
            自然连接: 从两个输入关系中输出这样的元组对：它们在相同的名字的所有属性上取值相同
            并：两个关系中的元组的并

        SQL：最早的版本由IBM研发，叫做sequel
            ANSI, ISO: SQL-86， SQL-89，SQL-92，SQL-99，SQL-03，SQL-06，SQL-08

        SQL语言有如下几个部分组成：DDL、DML
            数据定义语言：DDL ，定义关系，修改关系，删除关系
                完整性（intigrity）：定义完整性约束的命令，隶属于DDL
                视图定义：管理视图view(虚表);
                授权：定义对表或视图的访问权限；
            数据操纵语言：DML，插入行、修改行、删除行；
            事务控制：创建事务和结束事务

            DDL: CREATE, DROP, ALTER, GRANT, REVOKE
            DML: INSERT, DELETE, UPDATE, SELECT

        SQL的数据定义：
            创建关系，即创建表：
                每个关系模式；
                每个属性的取值类型；
                完整性约束；
                索引的集合；
                表的安全性和权限信息；
                表的物理存储结构；
                    MyISAM: .frm, .MYD（数据）, .MYI（索引）
                    InnoDB: .frm, .ibd(数据+索引) 

        MySQL数据的类型：
            字符型：
                固定长度：CHAR
                可变长度：VARCHAR
                    mysql: BINARY, VARBINARY
            数值型：
                精确数值型：int: tinyint, smallint, mediumint, int, bigint
                近似数值型：float, double
            日期时间型：date, time, datetime, year(4), year(2)
            内置类型：ENUM, SET

            类型修饰：NULL, NOT NULL, DEFAULT 
                数值型：
                    UNSIGNED: 无符号
                整数：AUTO_INCREMENT
                    前提：字段必须为主键或惟一键
                键：
                    PRIMARY KEY
                    UNIQUE KEY

MySQL安装配置：
    yum安装：yum -y install mysql-server|mariadb-server
    初始化库：mysql_install_db
    添加密码：mysql_secure_installation      # 初次安装后运行一次

    配置文件：/etc/my.cnf和/etc/my.cnf.d/*.cnf
        初次安装建议添加如下：
        [mysqld]
        innodb_file_per_table = On
        skip-name-resolve          # 关闭主机ip反解，5.5以上需要在命令行参数添加


MySQL操作：MySQL提示下命令
    I. 管理数据库：
        1. CREATE DATABASE DB_NAME;    # 创建库
        2. DROP DATABASE DB_NAME;      # 删除库
        3. SHOW DATABASES;             # 显示库

    II. 管理表：
        1. CREATE TABLE [DB_NAME.]TABLE_NAME (COLUMN DEFINATION)    # 创建表
            COLUMN DEFINATION:(col1_name data_type [修饰符], col2_name data_type [修饰符])
            例子：students(SID, Name, Age, Gender, Class)

            CREATE TABLE students (
                ID INT UNSIGNED NOT NULL UNIQUE KEY AUTO_INCREMENT, 
                Name CHAR(10) NOT NULL, Age TINYINT, 
                Gender ENUM('f','m') NOT NULL, Class VARCHAR(50)
            );

        2. DESC TB_NAME;           # 查看表定义
        3. DROP TABLE TB_NAME;     # 删除表

    III.管理用户：
        1. CREATE USER USERNAME@HOST [IDENTIFIED BY 'password'];
            HOST表示格式：
                ip: 
                网络地
            MySQL的字符通配符：
                %: 匹配任意长度的任意字符
                _: 匹配任意单个字符

        2. DROP USER USERNAME@HOST;
        3. GRANT 权限列表 ON DB_NAME.TB_NAME TO USERNAME@HOST [IDENTIFIED BY 'new_pass'];
            权限列表：ALL, SELECT, UPDATE, DELETE, INSERT
            DB_NAME：*: 所有库
            TB_NAME：*: 所有表

            刷新授权表，以使得权限立即生效：
                FLUSH PRIVILEGES;

        4. REVOKE 权限列表 ON DB_NAME.DB_TABLE FROM USERNAME@HOST;

    IV. 数据库操作： 
        1. 插入数据：
            INSERT INTO tb_name [(col1, col2,...)] VALUE|VALUES (val1, val2,...)[,(val1, val2,...)]; 

            mysql> INSERT INTO students (Name,Age,Gender,Class) VALUES ('jerry',43,'m','class 2'),('Ou Yangfeng',77,'m','Hamopai');

        2. 查询数据：
            SELECT 字段列表 FROM 表 WHERE 条件子句 ORDER BY 字段;

                组合条件：and, or, not
                条件子句：=, >, <, >=, <=, !=, BETWEEN .. AND .., LIKE, RLIKE
                    Name RLIKE '^O.*$'

        3. 删除数据：
            DELETE FROM tb_name WHERE 条件子句 [LIMIT n];

        4. 更新数据：
            UPDATE tb_name SET col1=new_value1 WHERE 条件子句;

    V. 其它：
        SHOW ENGINES;           # 查看MariaDB支持哪此存储引擎
        SHOW TABLE STATUS       # 查看表的属性信息
        SHOW CHARACTER SET;     # 查看支持的字符集
        SHOW COLLATION;         # 查看排序规则
        SHOW {GLOBAL|SESSION} VARIALES [LIKE ''];       # 服务器变量
        SHOW {GLOBAL|SESSION} STATUS [LIKE ''];         # 状态变量



补充材料：RDMBS设计范式基础概念

    设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。

    目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴德斯科范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。

    (1) 第一范式（1NF）

    所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。

    说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。

    (2) 第二范式(2NF)

    第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。

    第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。

    (3) 第三范式（3NF）

    第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。
            