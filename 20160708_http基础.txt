2016-07-08
# edit by liu2lin600

http基础：

套接字：两类
    socket：IP port 
            IP:port
            Ip.port

    unix sock：基于文件系统通信实现

    BSD发明：
    MTU：最大传输单元

传输层协议：
    面向连接的：TCP
        虚连接（95%）
    无连接的：UDP

套接字的类型：
    TCP套接字
    UDP套接字
    raw套接字（由程序自身维护）

物理层=硬件
数据链路层=驱动

通信：点对点
      c/s（client/server）

客户端的为随机端口

c/s：
   通信子网：传输
   应用层协议：特定的
      http，https，smtp,pop,imap,ftp,ldap



http： 超文本传输协议（hyprttext transport protcol）
    html:hypertext mark language(超文本标记语言)

    client:browser
        URI（统一资源提示符）的子集：URL（统一资源定位符）
    server:http server




动态页面：
    程序脚本
        客户端
        服务器端 CGI(common gateway interface程序通用接口)
            c,c++,perl,python,php,asp.net,jsp

web资源：一个页面中可能会包含多个页面对象

    URI：Uniform Resource Identifier
    URL：Uniform Resource Locator

        组成：协议:主机地址:资源

http协议的版本：
    http0.9：只能传输html文档，1991年
    http1.0：支持多媒体数据的处理，保持连接。有缓存功能
        cache, MIME:multipurpose Internet mail extension 互联网多用户邮件扩展
    http1.1：支持更多的请求方法，更加精细的缓存控制，持久连接
        speedy:spdy
    http2.0：

http协议实现：
    简单的基本http协议服务器：httpd(apache), nginx, lighttpd
    动态服务器技术：IIS,tomcat, jetty, resin...

一个http请求的基本过程：
    建立连接 -> 接收请求 -> 处理请求 -> 访问资源 -> 构建响应 -> 发送响应 -> 记录日志

并发响应模型：
    1. 单线程I/O结构:串行响应
    2. 多线程I/O结构:同时启动多个进程，每个进程响应一个请求
    3. 复用的I/O结构:
        多进程模型：一进程生成多个线程，每个线程响应一个请求
        事件驱动：一个进程响应多个请求
    4. 复用多线程I/O结构:多个线程，每个线程响应多个请求


HTTP报文：
    HTTP事务：一次请求以与其对应的响应
    HTTP方法：GET、PUT、HEAD、POST、DELETE
    
    HTTP请求：request
        请求报文格式：
            <method><request-url><version>
            <headers>...

            <entity-body>
            首部headers组成：
                name：value
                content-type：images/gif

    HTTP响应：response
        响应报文格式：
            <version><status><reason-phrase>
            <headers>
            
            <entity-body>

            <method>：请求方法，希望服务器端执行的动作，如GET、HEAD、POST等
            <request-url>：请求的资源，可以是相对路径，也可以是完整的URL
            <version>：协议版本，格式HTTP/<major>。<minor>，如http/1.0
            <headers>：HTTP首部
            <status>：状态码
            <reason-phrase>：原因短语，数字状态吗易读信息
            <entity-body>：主体部分

        http协议：是一种stateless（无状态）协议，一次HTTP事务结束后，链接即行断开

            加速方式：
                并行请求
                持久连接

HTTP的请求方法：method
    1. 安全的方法：GET、HEAD
    2. POST、PUT、DELETE、OPTIONS、TRACE
    3. 扩展方法：LOCK、MKCOL、COPY、MOVE

    GET：请求获取一个资源，需要服务器发送
    HEAD：跟GET相似，但其不需要服务发送资源而仅传回响应首部
    POST：支持HTML表单提交，表单中有用户填入的数据，这些数据会发送到服务器端，由服务器存储至某位置（例如发送处理程序）
    PUT：与GET相反，向服务写入文档,发布系统,不安全
    DELETE：请求删除URL指向的资源
    OPTIONS：探测服务器端对某资源所支持的请求方法
    TRACE：追踪请求资源要经过的web网关等


请求响应状态码：status
    1XX：信息性状态码
        100：
    2XX：成功状态码
        200：OK
        201：Created OK
    3XX：重定向状态码
        301：Moved Permanebtly 永久重定向，在响应报文中使用首部"Location: URL"指定资源现在所在的位置
        302：Found 临时重定向，在响应报文中使用首部"Location: URL"指定临时资源位置
        304：Not Modified，请求的资源与客户端未改变
    4XX：客户端的错误
        401：认证质询
        403：Forbidden,请求被服务器拒绝
        404：Not Found，服务器无法找到请求的URL
        405：Method Not Allowed,不允许使用此方法请求响应的URL
    5XX：服务器类的错误
        500：Internal Server Error，服务器内部错误
        502：Bad Gateway：代理服务器从上游收到一条伪响应
        503：Service Unavailable，服务器此时无法提供服务，但将来可能可用

HTTP首部：headers
    1. 通用首部：请求和响应都可以使用的
        Date：报文创建时间
        Connection：定义C/S之间关于请求/响应的有关选项
            对于http/1.0，Connection keep-alive
        Via：显示了报文经过的中间节点
        Cache-Control：缓存控制
        Pragma：(1.0中使用)

    2. 请求首部：请求专用
        Client-IP：请求端IP
        Host：请求的主机名和端口号，虚拟主机环境下用于不同的虚拟主机
        Referer：指明了请求当前资源的原始资源的URL
        User-Agent：用户代理，使用什么工具发出的请求

        Accept首部：用户标明客户自己更倾向于支持使用的能力
            Accept：指明服务器能发送的媒体类型，MIME，如images/jpeg
            Accept-Charset：支持使用的字符集
            Accept-Encoding：支持使用的编码方式
            Accept-Language：支持使用语言

        条件请求首部：
            Expect：期望的行为
            If-Modified-Since：是否在指定的时间以来修改过此资源
            IF-Unmodified-Since：
            If-None-Match：是否不匹配，ETag值
            IF-Match：

        跟安全相关的请求首部：
            Authorication：客户端提交给服务端的认证数据，如账号和密码
            Cookie：客户端发送给服务器端身份标识
            Cookie2：
    
    3. 响应首部：响应专用 
        Age：响应持续的时长
        Server：向客户端标明服务器程序名称和版本等

        协商首部：
            Accept-Ranges：对当前资源来讲，服务器所能够接受的范围类型
            Vary：首部列表，服务器会根据列表中的内容挑选出最适合的版本发送给客户端

        跟安全相关的响应首部：
            Set-Cookie：服务器端在某客户端第一次请求时发给的令牌
            Set-Cookie2：
            WWW-Authenication：质询，即要求客户端提供账号和密码

    4. 实体首部：用于指定实体属性
        Location：资源的新位置
        Allow：允许对此资源使用的请求方法

        内容首部：
            Content-Encoding
            Content-Language
            Content-Length
            Content-Type
            Content-Range
            Content-Location

        缓存首部：
            ETag：实体标签
            Expires：过期标签
            Last-Modified：上一次的修改时间

    5. 扩展首部：用户自定义
        X-Forward-For：

    更多参考《HTTP权威指南》

