2016-07-01
# edit by liu2lin600

iptables：
    
    Firewall：TCP/IP协议栈，Linux (内核)，工作于主机或网络边缘，对于进出的报文根据定义的规则作检查，进而对被规则匹配到的报文作为相应处理的套件
        主机防火墙：工作主机边缘(软件),INPUT, OUTPUT
        网络防火墙：工作网络边缘(硬件), ,,
        
        网络层：防火墙
        应用层：网关，应用层网关防火墙
    
    IDS：Intrusion Detect System，入侵检测系统，结合防火墙使用
        HIDS: Host IDS，OSSEC
        NIDS: Network IDS，snort

    IPS：Intrusion Protect System，入侵防御系统，结合IDS + Firewall

    HoneyPot：蜜罐

    bt：backtrack发行版(基于安全)
        Nessus, nmap，自我攻击检测工具


    iptables/netfilter：网络层防火墙
        发展：ipfw --> ipchains --> iptables
            让用户编写规则

        iptables：防火墙规则编写规则，用户空间的工具，写规则，并自动发往netfilter，立即生效
        netfilter：framework框架，接收并生效规则
            hook function：钩子函数
                1. 路由前，目标地址转换       == > PREROUTING
                2. 到达本机内部的报文必经之路 == > INPUT
                3. 由本机转发的报文必经之路   == > FORWARD
                4. 由本机发出的报文的必经之路 == > OUTPUT
                5. 路由后，源地址转换         == > POSTROUTING


            规则的功能：
                1. raw: 目标是关闭nat表上启用的连接追踪功能
                2. mangle: 
                3. nat: 地址转换，启用connection_track
                    SNAT:源地址转换
                    DNAT:目标地址转换
                    PNAT:端口转换
                4. filter: 过滤，定义是否允许通过防火墙

            4表和5链的对应关系：
                raw表：PREROUTING, OUTPUT
                mangle表：PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING
                nat表：PREROUTING（SNAT），POSTROUTING（DNAT），OUTPUT
                filter表：(默认) INPUT, FORWARD, OUTPUT

            规则：检查条件，处理机制
                通：白名单
                堵：黑名单

                写规则时先确定功能（表），确定报文流向，确定要实现的目标，确定匹配条件

            检查条件：
                IP：SIP, DIP
                TCP：SPORT, DPORT, FLAGS
                UDP：SPORT, DPORT
                ICMP：ICMP-TYPE

            处理机制：
                DROP、REJECT、ACCEPT、SNAT、DNAT、RETURN、REDIRECT、LOG

            数据报文流程：
                与本机内部进程通信：
                    进入：--> PREROUTING --> INPUT
                    出去：--> OUTPUT --> POSTROUTING

                由本机转发：
                    请求：-->PREROUTING-->FORWARD-->POSTROUTING
                    响应：-->PREROUTING-->FORWARD-->POSTROUIING
                    规则中如果限定原地址、目标地址、源端口、目标端口等与流向相关的设定

            数据报文的流向：
                源IP和目标IP由流向决定



    iptables命令语法：
        1. iptables [-t TABLE] COMMAND CHAIN  CRETIRIA -j TARGET

        -t TABLE：raw, mangle, nat, filter，默认为filter

        COMMAND：
            对链管理：
                -F：flush, 清空规则链，无法还原
                -N：new, 新建一条自定义链，被内建链上规则调用才能生效
                -X：delete, 删除一条自定义的空链
                -P：policy，设置默认策略，对filter表来讲，默认规则为ACCEPT或DROP；
                -E：重命名自定义引用计数为0的链
                -Z：zero，计数器归零

            对规则管理：
                -A：Append，在尾后追加
                -I：Insert，在指定位插入规则，省略位置则为链首
                -D：Delete
                    iptables -D INPUT 2   #2指定INPUT中的第二条
                -R：Replace，将指定规则替换为新规则

            显示：
                -L：list
                    -n：数字格式显示主机地址和端口
                    -v：详细格式，-vv, -vvv
                        显示格式：pkts bytes target prot opt in  out  source destination
                            pkts：被本规则匹配的报文个数 
                            bytes：被本规则所匹配到的所有报文字节数 
                            target：目标，即处理机制    
                            prot：协议  
                            opt：可选项
                            in：流入的接口  
                            out：流出的接口   
                            source：源地址               
                            destination：目标地址
                    -x：exactly，不要对计数器的计数结果做单位换算，而显示其精确值
                    --line-numbers：显示规则编号
                -S：

        2. iptables [-t TABLE] -A 链名 匹配条件 -j 处理目标
            处理目标：
                DROP、REJECT、ACCEPT、SNAT、DNAT、RETURN、REDIRECT、LOG
                    -j DROP|ACCEPT|REJECT|RETURN            # RETURN一般用于自定义链上，自定义链被内置链引用时，没被匹配时，返回内置链的下一条规则
                    -j SNT --to-source SIP                  # 规则添加在POSTROUTING链
                    -j MASQUERAADE                          # 动态获取
                    -j DNAT --to-destination DIP[:PORT]     # 支持端口映射
                    -j LOG --log-prefix 'xxx'               # 添加日志前缀，放规则第一条
                    -j REDIRECT --to-ports PORT[:PORT]      # 用于PREROUTING，OUTPUT上，nat表上端口转换

            匹配条件：
                I.通用匹配：
                    [!] -s ADDR[/mask]：指定报文源IP地址匹配的范围，可以是IP和网络地址，!取反
                    [!] -d ADDR[/mask]：指定报文目标IP地址匹配的范围
                    [!] -p 协议：指定匹配报文的协议类型，一般有三种tcp, udp和icmp
                    [!] -i INTERFACE：数据报文流入的接口；只适用于PREROUTING, INPUT, FORWARD
                    [!] -o INTERFACE：数据报文流出的接口；只适用于OUTPUT, FORWARD, POSTROUITING

                II.扩展匹配：
                    隐式扩展：当使用-p {tcp|udp|icmp}一种时，自动能对协议进行扩展
                        -p tcp：
                            --sport PORT[:PORT]: 指定源端口，可以是连续多个端口
                            --dport PORT[:PORT]: 指定目标端口
                            --tcp-flags: rst,syn,ack,fin  syn  # 左例表示4个位中syn为1其它为0，等同--syn选项
                                RST, SYN, ACK, FIN, all, none
                        #iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.60.1 -p tcp --dport 22 -j ACCEPT
                        #iptables -t filter -A OUTPUT -s 172.16.60.1 -d 172.16.0.0/16 -p tcp --dport 22 -j ACCEPT
                        #iptables -t filter -A INPUT  -p tcp --tcp-flags all all -j DROP
                        #iptables -t filter -A OUTPUT  -p tcp --tcp-flages all none -j DROP
                        
                        -p udp：
                            --sport 
                            --dport

                        放行本机dns：如本机172.16.60.1
                        #iptables -A INPUT -s 172.16.0.0/16 -d 172.16.60.1 -p udp --dport 53 -j ACCEPT
                        #iptables -A OUTPUT -s 172.16.60.1 -d 172.16.0.0/16 -p udp --sport 53 -j AACEPT
                        #iptables -A OUTPUT -s 172.16.60.1 -p udp --sport 53 -j ACCEPT  # 本机访问其它
                        #iptables -A INPUT -d 172.16.60.1 -p udp --dport 53 -j ACCEPT

                        -p icmp：
                            --icmp-type
                                8：echo-request,请求
                                0：echo-reply,响应

                        放行ping其它主机：
                        #iptables -A INPUT -d 172.16.60.1 -p icmp --icmp-type 0 -j ACCEPT
                        #iptables -A OUTPUT -s 172.16.60.1 -p icmp --icmp-type 8 -j ACCEPT


                    显式扩展：必须明确说明使用哪个模块进行扩展，而后才能使用其扩展专用选项
                        -m multiport：多端口匹配，可用于匹配非连续(,)或连续端口(:)
                            专用选项：选项前加'!'取反
                                [!] --sports PORT[,PORT...]
                                [!] --dports PORT[,PORT...]
                                [!] --ports PORT[,PORT...]

                            # iptables -I INPUT -d 172.16.60.1 -p tcp -m multiport --dports 22,80 -j ACCEPT
                            # iptables -I OUTPUT -s 172.16.60.1 -p tcp -m multiport --sports 22,80 -j ACCEPT

                        -m iprange：匹配指定范围内的地址，匹配一段连续的地址而非整个网络时有用
                            专用选项：
                                [!] --src-range FROM_IP[-TO_IP]
                                [!] --dst-range FROM_IP[-TO_IP]

                            # iptables -A INPUT -d 172.16.60.1 -p tcp --dport 23 -m iprange --src-range 172.16.60.1-172.16.60.100 -j ACCEPT
                            # iptables -A OUTPUT -s 172.16.60.1 -p tcp --sport 23 -m iprange --dst-range 172.16.60.1-172.16.60.100 -j ACCEPT

                        -m string：字符串匹配，能够检测报文应用层中的字符串
                            字符匹配检查高效算法:kmp, bm

                            专用选项：
                                [!] --string PATTERN: 指定字符串
                                [!] --hex-string "HEX_STRING": HEX_STRING为编码成16进制格式的字串
                                --algo {kmp|bm}: 指定算法

                            # iptables -I OUTPUT -m string --algo kmp --string "sex" -j DROP

                        -m time：基于时间做访问控制
                            专用选项：
                                --datestart YYYY[-MM][-DD[Thh[:mm[:ss]]]]
                                --datestop YYYY[-MM][-DD[Thh[:mm[:ss]]]]

                                --timestart hh:mm[:ss]
                                --timestop hh:mm[:ss]

                                [!]--monthdays day[,day...]
                                [!]--weekdays day[,day]|1-7
                                    Mon, Tue,

                            # iptables -A INPUT -d 172.16.60.1 -p tcp --dport 90 -m time --timestart 08:20 --timestop 18:40 --weekdays Mon,Tue,Thu,Fri -j ACCEPT
                            # iptables -A OUTPUT -s 172.16.60.1 -p tcp --dport 901 -j ACCEPT

                        -m connlimit：连接数限制，对每IP所能够发起并发连接数做限制
                            专用选项：
                                --connlimit-upto N : <=
                                --connlimit-above N : >=

                            # iptables -A INPUT -d 172.16.60.1 -p tcp --dport 80 -m connlimit --connlimit-above 5 -j DROP

                        -m limit：速率限制
                            专用选项：
                                [!] --limit n[/second|/minute|/hour|/day]: 限制每秒,分,小时,天n个
                                [!] --limit-burst n: 峰值限制

                            # iptables -A INPUT -d 172.16.60.1 -p icmp --icmp-type 8 -m limit --limit 20/second --limit-burst 5 -j ACCEPT
                            限制ping峰值5，每秒20个

                        -m state：状态匹配
                            专用选项：
                                [!] --state STATE

                            连接追踪中的状态STATE：
                                NEW：新建连接
                                ESTABLISHED：已建立的连接
                                RELATED：有关联关系的连接
                                INVALID：无法识别的连接
                                UNTRACKED：

                            # iptables -I INPUT -d 172.16.60.1 -m multiport --dports 22,80 -m state --state NEW,ESTABLISHED -j ACCEPT
                            # iptables -I OUTPUT -s 172.16.60.1 -m state --state ESTABLISHED -j ACCEPT

                            法则：
                                1. 所有进入或出去状态为ESTABLISHED都应该放行
                                2. 严格检查进入状态为NEW的连接
                                3. 所有状态有INVALIED都应该拒绝

                            记录状态内核模块：nf_conntrack

                            调整连接追踪功能所能容纳的连接的最大数目：建议调大此值
                                /proc/sys/net/nf_conntrack_max

                            记录当前追踪的所有连接：
                                /proc/net/nf_conntrack

                            不同协议或连接类型追踪时的属性：
                                /proc/sys/net/netfilter/目录下各文件

                            如何放行被动模式下的FTP服务：
                                1、装载模块/lib/modules/KERNEL_VERSION/kernel/net/netfilter/
                                    模块：nf_conntrack_ftp, nf_nat_ftp

                                    # modprobe nf_conntrack_ftp

                                2、放行请求报文：
                                    (1)放行NEW状态对21端口请求的报文；
                                    (2)放行ESTABLISHED以及RELATED状态的报文

                                3、放行响应报文：
                                    (1) 放行ESTABLISHED以及RELATED状态的报文


            规则文件：/etc/sysconfig/iptables
                尽量减少规则条目，彼此不相关的匹配机会较多放在上面，属于同一功能匹配规更严格放在上面

                保存启用中的规则于规则文件中：
                    1、# iptables-save > /etc/sysconfig/iptables
                    2、# service iptables save

                生效规则文件中的规则：
                    1、# iptables-restore < /etc/sysconfig/iptables
                    2、# service iptables restore
                执行的操作：清空现有规则，读取并生效规则文件中的规则


            删除规则：
                iptables [-t table] -D chain rulenum    #rulenum为指定链中第几条记录

            设置策略：
                iptables [-t table] -P chain target

            修改规则：
                iptables [-t table] -R chain rulenum rule-specification  #规则需重新写一遍

            插入规则：
                iptables [-t table] -I chain [rulenum] rule-specification

            创建自定义链：
                iptables [-t table] -N chain

            删除自定义且引用计数为0的空链：
                iptables [-t table] -X chain

            重命名自定义且引用计数为0的链：
                iptables [-t table] -E old_name new_name


        NAT：网络地址转换
            过载技术
            Basic NAT：静态NAT
            NAPT：动态NAT，网络地址端口转换
                源地址转换：SNAT，用于内网主机访问互联网，nat表上POSTROUTING，INPUT
                目标地址转换：DNAT，让互联网上主机访问本地内网上的某服务器上的服务，nat表上PREROUTING和OUTPUT

                iptables基于SNAT和DNAT这两个目标实现地址转换技术：
                    -j SNT --to-source SIP      # 规则添加在POSTROUTING链
                        iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -j SNAT --to-source 172.16.100.67
                    
                    -j MASQUERADE              # 动态获取，仅用于nat表的POSTROUTING
                        iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -j MASQUERADE
                    
                    -j DNAT --to-destination DIP[:PORT]  # 支持端口映射
                        iptables -t nat -A PREROUTING -d 8.8.8.9 -p -tcp --dport 22022 -j DNAT --to-destination 192.168.0.1:22
                    # 外部访问公司对外服务器8.8.8.9的22022端口时，将请求转发给本地服务器192.168.0.1的22端口上

            

        RAW表只使用在PREROUTING链和OUTPUT链上,因为优先级最高，从而可以对收到的数据包在连接跟踪前进行处理。一但用户使用了RAW表,在某个链上,RAW表处理完后,将跳过NAT表和 ip_conntrack处理,即不再做地址转换和数据包的链接跟踪处理了.

        RAW表可以应用在那些不需要做nat的情况下，以提高性能。如大量访问的web服务器，可以让80端口不再让iptables做数据包的链接跟踪处理，以提高用户的访问速度。

        实际测试发现filter链仍然处理一些NOTRACK的包，但没有进行connect tracking，所以filter链条里必须将UNTRACKED状态的包放行


        iptables的链接跟踪表最大容量为/proc/sys/net/ipv4/ip_conntrack_max，链接碰到各种状态的超时后就会从表中删除。

        所以解決方法一般有两个：
        (1) 加大 ip_conntrack_max 值
        vim /etc/sysctl.conf
            net.ipv4.ip_conntrack_max = 393216
            net.ipv4.netfilter.ip_conntrack_max = 393216
        (2): 降低 ip_conntrack timeout时间
        vim /etc/sysctl.conf
            net.ipv4.netfilter.ip_conntrack_tcp_timeout_established = 300
            net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait = 120
            net.ipv4.netfilter.ip_conntrack_tcp_timeout_close_wait = 60
            net.ipv4.netfilter.ip_conntrack_tcp_timeout_fin_wait = 120

        iptables -t nat -L -n



练习1：INPUT和OUTPUT默认策略为DROP；

    1、限制本地主机的web服务器在周一不允许访问；新请求的速率不能超过100个每秒；web服务器包含了admin字符串的页面不允许访问；web服务器仅允许响应报文离开本机
        iptables -A INPUT  -d 172.16.60.2 -p tcp --dport 80 -m time --weekdays 2,3,4,5,6,7 -m limit --limit 100/second  -j ACCEPT

        iptables -A OUTPUT  -s 172.16.60.2 -p tcp --sport 80 -m string --algo bm --string "admin" -j DROP
        iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

    2、在工作时间，即周一到周五的8:30-18:00，开放本机的ftp服务给172.16.0.0网络中的主机访问；数据下载请求的次数每分钟不得超过5个
        iptables -A INPUT -s 172.16.0.0/16 -p tcp --dport 21 -m time --weekdays 1,2,3,4,5 --timestart 8:30 --timestop 18:00 -m limit --limit 5/minute -m state --state NEW -j ACCEPT
        iptables -A INPUT -s 172.16.0.0/16 -p tcp -m state --state RELATED -j ACCEPT
        iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

    3、开放本机的ssh服务给172.16.x.1-172.16.x.100中的主机，x为你的座位号，新请求建立的速率一分钟不得超过2个；仅允许响应报文通过其服务端口离开本机
        iptables -A INPUT -m state --state ESTABLISHED,NEW -j ACCEPT
        iptables -A INPUT  -d 172.16.36.61 -p tcp --dport 22 -m iprange --src-range 172.16.36.1-172.16.36.100 -m connlimit --connlimit-above 2/minute -j DROP
        iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

    4、拒绝TCP标志位全部为1及全部为0的报文访问本机
        iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
        iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

    5、允许本机ping别的主机；但不开放别的主机ping本机
        iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT
        iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT

练习2：判断下述规则的意义：
    iptables -N clean_in
    iptables -A clean_in -d 255.255.255.255 -p icmp -j DROP
    iptables -A clean_in -d 172.16.255.255 -p icmp -j DROP

    iptables -A clean_in -p tcp ! --syn -m state --state NEW -j DROP
    iptables -A clean_in -p tcp --tcp-flags ALL ALL -j DROP
    iptables -A clean_in -p tcp --tcp-flags ALL NONE -j DROP
    iptables -A clean_in -d 172.16.60.1 -j RETURN 


    iptables -A INPUT -d 172.16.60.1 -j clean_in

    iptables -A INPUT  -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT


    iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 53,113,135,137,139,445 -j DROP
    iptables -A INPUT  -i eth0 -m multiport -p udp --dports 53,113,135,137,139,445 -j DROP
    iptables -A INPUT  -i eth0 -p udp --dport 1026 -j DROP
    iptables -A INPUT  -i eth0 -m multiport -p tcp --dports 1433,4899 -j DROP

    iptables -A INPUT  -p icmp -m limit --limit 10/second -j ACCEPT

补充：
    利用iptables的recent模块来抵御DOS攻击: 22，建立一个列表，保存有所有访问过指定的服务的客户端IP


    ssh: 远程连接，

    iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 3 -j DROP

    iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH
    iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j LOG --log-prefix "SSH Attach: "
    iptables -I INPUT  -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 300 --hitcount 3 --name SSH -j DROP

    1. 利用connlimit模块将单IP的并发设置为3；会误杀使用NAT上网的用户，可以根据实际情况增大该值；
    2. 利用recent和state模块限制单IP在300s内只能与本机建立2个新连接。被限制五分钟后即可恢复访问。

    最后两句说明：
        1. 第二句是记录访问tcp 22端口的新连接，记录名称为SSH
            --set 记录数据包的来源IP，如果IP已经存在将更新已经存在的条目

        2. 第三句是指SSH记录中的IP，300s内发起超过3次连接则拒绝此IP的连接。
            --update 是指每次建立连接都更新列表；
            --seconds必须与--rcheck或者--update同时使用
            --hitcount必须与--rcheck或者--update同时使用

        3. iptables的记录:/proc/net/xt_recent/SSH


    也可以使用下面的这句记录日志：
    iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --name SSH --second 300 --hitcount 3 -j LOG --log-prefix "SSH Attack"





    iptables实现七层访问过滤：

        模块：layer7，识别应用层协议

        iptables/netfilter
            iptables -m state, 
            netfilter state

        1. 对内核中的netfilter，打补丁layer7，重新编译内核
        2. 对iptables打补丁，补上layer7模块，重新编译iptables


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
diff/patch：文本操作工具

    diff工具：用来比较两个文本文件的差异，是代码版本管理的核心工具之一
        
        语法：diff <变动前的文件> <变动后的文件>

        由于历史原因，diff有三种格式：
        　　* 正常格式（normal diff）
        　　* 上下文格式（context diff）
        　　* 合并格式（unified diff）

        1、正常格式的diff
            例如，对file1（变动前的文件）和file2（变动后的文件）进行比较可使用如下命令：
        　　  # diff file1 file2
            显示结果中，第一行是一个提示，用来说明变动位置。它分成三个部分：前面的数字，表示file1的第n行有变化；中间的"c"表示变动的模式是内容改变（change），其他模式还有"增加"（a，代表addition）和"删除"（d，代表deletion）；

        2、上下文格式的diff
            上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff。它的使用方法是加入-c选项（即context）。
        　　  # diff -c f1 f2
            结果分成四个部分。第一部分的两行，显示两个文件的基本情况：文件名和时间信息，"***"表示变动前的文件，"---"表示变动后的文件。第二部分是15个星号，将文件的基本情况与变动内容分割开。第三部分显示变动前的文件，即file1。
            另外，文件内容的每一行最前面，还有一个标记位。如果为空，表示该行无变化；如果是感叹号（!），表示该行有改动；如果是减号（-），表示该行被删除；如果是加号（+），表示该行为新增。
            第四部分显示变动后的文件，即file2。

        3、合并格式的diff
            如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了"合并格式"的diff，将f1和f2的上下文合并在一起显示。
            它的使用方法是加入u参数（代表unified）。
        　　# diff -u f1 f2
            其结果的第一部分，也是文件的基本信息。"---"表示变动前的文件，"+++"表示变动后的文件。第二部分，变动的位置用两个@作为起首和结束。第三部分是变动的具体内容。
            除了有变动的那些行以外，也是上下文各显示3行。它将两个文件的上下文，合并显示在一起，所以叫做"合并格式"。每一行最前面的标志位，空表示无变动，减号表示第一个文件删除的行，加号表示第二个文件新增的行。


    patch工具：

        尽管并没有指定patch和diff的关系，但通常patch都使用diff的结果来完成打补丁的工作，这和patch本身支持多种diff输出文件格式有很大关系。patch通过读入patch命令文件（可以从标准输入），对目标文件进行修改。通常先用diff命令比较新老版本，patch命令文件则采用diff的输出文件，从而保持原版本与新版本一致。

        语法：patch [options] [originalfile] [patchfile]

        如果patchfile为空则从标准输入读取patchfile内容；如果originalfile也为空，则从patchfile（肯定来自标准输入）中读取需要打补丁的文件名。因此，如果需要修改的是目录，一般都必须在patchfile中记录目录下的各个文件名。绝大多数情况下，patch都用以下这种简单的方式使用：
        

        patch命令可以忽略文件中的冗余信息，从中取出diff的格式以及所需要patch的文件名，文件名按照diff参数中的"源文件"、"目标文件"以及冗余信息中的"Index："行中所指定的文件的顺序来决定。

        -p参数决定了是否使用读出的源文件名的前缀目录信息，不提供-p参数，则忽略所有目录信息，-p0（或者-p 0）表示使用全部的路径信息，-p1将忽略第一个"/"以前的目录，依此类推。如/usr/src/linux-2.4.15/Makefile这样的文件名，在提供-p3参数时将使用linux-2.4.15/Makefile作为所要patch的文件。

            patch [-p|-R]
^^^^^^^^^^^^^^^^^^^^^^^^^^^


    操作步骤：

        1、获取并编译内核

        # useradd mockbuild
        # rpm -ivh kernel-2.6.32-431.5.1.x86_64.el6.src.rpm
        # cd rpmbuild/SOURCES
        # tar linux-2.6.32-*.tar.gz -C /usr/src
        # cd /usr/src
        # ln -sv 

        2、给内核打补丁
        # tar xf netfilter-layer7-v2.23.tar.bz2
        # cd /usr/src/linux
        # patch -p1 < /root/netfilter-layer7-v2.23/kernel-2.6.32-layer7-2.23.patch
        # cp /boot/config-*  .config
        # make menuconfig

    按如下步骤启用layer7模块     
        Networking support → Networking Options →Network packet filtering framework → Core Netfilter Configuration
        <M>  “layer7” match support

        3、编译并安装内核
        # make
        # make modules_install
        # make install

        4、重启系统，启用新内核

        5、编译iptables

        # tar xf iptables-1.4.20.tar.gz
        # cp /root/netfilter-layer7-v2.23/iptables-1.4.3forward-for-kernel-2.6.20forward/* /root/iptables-1.4.20/extensions/
        # cp /etc/rc.d/init.d/iptales /root
        # cp /etc/sysconfig/iptables-config /root
        # rpm -e iptables iptables-ipv6 --nodeps
        # ./configure  --prefix=/usr  --with-ksource=/usr/src/linux
        # make && make install

        # cp /root/iptables /etc/rc.d/init.d
        # cp /root/iptables-config /etc/sysconfig

        6、为layer7模块提供其所识别的协议的特征码

        # tar zxvf l7-protocols-2009-05-28.tar.gz
        # cd l7-protocols-2009-05-28
        # make install      

        7、如何使用layer7模块
        # vim /etc/sysctl.conf 添加 net.netfilter.nf_conntrack_acct = 1
        # sysctl -p
        # modprobe nf_conntrack

        ACCT的功能已经可以在内核参数中按需启用或禁用。此参数需要装载nf_conntrack模块后方能生效。

        8、开启layer7
        l7-filter uses the standard iptables extension syntax 
        # iptables [specify table & chain] -m layer7 --l7proto [protocol name] -j [action] 

        # iptables -A FORWARD -m layer7 --l7proto qq -j REJECT


iptables FORWARD实验：

环境说明：
    Centos6_1：模拟公网
        eth0
            IP:172.16.60.2/16
            gateway:172.16.60.3
    Centos6_2：充当路由转发
        eth0
            IP:172.16.60.3/16
            gateway:172.16.0.1/16(可以不使用网关)
        eth1
            IP:192.168.0.1/24
    Centos6_3：模拟内网
        eth0
            IP:192.168.0.2/24
            GATE:192.168.0.1

    说明：172.16.60.2与3使用桥接网络,处于教室实验网络, 192.168.0.1与2处于vmnet2虚拟网络

实验一：在172.16.60.2服务器安装vsftpd服务, 要求放行ftp服务
    
Centos 6_2
    1. 在60.2服务器上安装vsftpd服务, 并确认vsftpd服务监听在21端口
    2. 设置FORWARD链的默认重力为DROP
        iptables -P FORWARD DROP
    3. 装载模块
        modprobe nf_conntrack_ftp
    4. FORWARD链策略设置
        iptables -A FORWARD -m state --state ESTABLISHED -j ACCEPT   #开放两个方向的所有ESTABLISHED连接,放到第一条(因为匹配到的机率最多)
        iptables -A FORWARD -d 172.16.60.2 -p tcp --dport 21 -m state --state NEW -j ACCEPT #开放在目标服务器的tcp 21号端口的服务,并且状态为NEW的才放行
        iptables -A FORWARD  -d 172.16.60.2 -m state --state RELATED -j ACCEPT     #将FTP的RELATED连接也放行, 这样客户端才能连接数据端口
    5. 使用tcpdump工具查看数据包(172.16.60.2端查看)
        ~]# tcpdump -i eth0 -nn tcp and host 192.168.0.2


    6. 开放80端口,给192.168./24网络的主机访问:
        iptables -R FORWARD 2 -d 172.16.60.2 -p tcp -m multiport --dport 21,80 -m state --state NEW -j ACCEPT
    7. 测试80端口开放情况(192.168.0.2主机测试)
        curl http://172.16.60.2
    8. iptbles的查看
        iptables -L -n

        Chain INPUT (policy ACCEPT)
        target     prot opt source               destination

        Chain FORWARD (policy DROP)
        target     prot opt source               destination
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state ESTABLISHED
        ACCEPT     tcp  --  0.0.0.0/0            172.16.60.2        multiport dports 21,80 state NEW
        ACCEPT     all  --  0.0.0.0/0            172.16.60.2        state RELATED

        Chain OUTPUT (policy ACCEPT)
        target     prot opt source               destination

实验二：在172.16.60.2运行apache服务, 要求内网(192.168.0)网络的主机,访问时, 使用172.16.60.3为源IP地址(SNAT)
    
    1. 确认Centos6_2的主机所有规则清空, 默认规则为允许, 以防止干扰规则判断
    iptables -L -n
        Chain INPUT (policy ACCEPT)
        target     prot opt source               destination

        Chain FORWARD (policy ACCEPT)
        target     prot opt source               destination

        Chain OUTPUT (policy ACCEPT)
        target     prot opt source               destination

        root@Centos6 ~]# iptables -t nat -L -n
        Chain PREROUTING (policy ACCEPT)
        target     prot opt source               destination

        Chain POSTROUTING (policy ACCEPT)
        target     prot opt source               destination

        Chain OUTPUT (policy ACCEPT)
        target     prot opt source               destination
    2. 在网络防火墙主机上(172.16.60.3)设置POSTROUTING链的SANT规则 
        iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 172.16.60.3
    3. 验证是否源主机为192.168.0.0/24网络的主机访问172.16.60.2主机的web, 源地址更改为172.16.60.3的IP地址
        tail -f /var/log/httpd/access_log
        172.16.60.3 - - [26/Jan/2016:16:27:44 +0800] "GET / HTTP/1.1" 200 25 "-" "curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2"


实验三：在192.168.0.2的主机安装web服务, 要求外网(172.16.60.2)主机访问时,完成DNAT转换
    
    1. 确认FORWARD/POSTROUTING/PREROUTING的链都没有设置规则 , 并且默认规则为ACCEPT
    2. 在192.168.0.2主机安装web服务,并启动相关服务, 确认并且能正常访问192.168.0.2的服务
    3. 在网络防火墙主机上(172.16.60.3)设置PREROUTING链的DNAT规则
        iptables -t nat -A PREROUTING  -d 172.16.60.3 -p tcp --dport 80 -j DNAT --to-destination 192.168.0.2:80
    
    4. 在172.16.60.2主机上尝试访问, 并查看192.168.0.2web的访问日志
        172.16.60.2 - - [26/Jan/2016:16:27:44 +0800] "GET / HTTP/1.1" 200 25 "-" "curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2"
